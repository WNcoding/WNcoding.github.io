import{_ as t,r as e,o,c,b as n,d as s,e as l,a}from"./app-d0f06d78.js";const i={},u=a(`<div class="custom-container tip"><p class="custom-container-title">前言</p><p>拼多多的笔试难度向来都比较大，希望大家理性对待。</p><p>关于网络流的模板直接背一下就好了，考的比例实在是很低。</p></div><h2 id="飞机大战" tabindex="-1"><a class="header-anchor" href="#飞机大战" aria-hidden="true">#</a> 飞机大战</h2><p>多多最近下载了一款飞机大战的游戏,多多可以通过游戏上的不同发射按键来控制飞机发射子单:</p><p>按下A键,飞机会发射出2枚子弹,每个子弹会对命中的敌人造成1点固定伤害，但不能作用于同个敌人。</p><p>按下B键,飞机会发射出1枚子弹,子弹会对命中的敌人造成巨额伤害并瞬间将其秒杀。</p><p>多多是个游戏高手,总是能操控子弹命中想要命中的敌人。这个游戏—共有T价关卡,消灭当前关卡全部敌人后,发射出去多余的子弹会消失,游戏会自动进入下一个关卡。</p><p>假设每个关卡都会在屏幕中同时出现N个敌人,这N个敌人所能承受的伤害也已经知道。多多想知道,每个关卡自己最少按几次发射按键就可以将敌人全部消灭?</p><p><strong>输入描述</strong></p><p>第一行输入一个固定数字T（1T=1000)表示关卡的总数量,N（1&lt;=N&lt;=200）表示每个关卡出现的敌人数量。</p><p>接下来T行，每行有N个数字D1,D2, ..... Dw（1&lt;= Di &lt;= 200)分别表示这N个敌人所能承受的伤害。</p><p><strong>输出描述</strong></p><p>结果共有N行，每行一个数字,分别表示对于这个关卡,最少按几次发射按键就可以将敌人全部消灭。</p><p>示例1</p><p>输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3 3 
1 2 1
2 3 2
1 2 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
3
3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>游戏共有3个关卡,每个关卡会出现3个敌人。
第一个关卡,先按下A建控制子弹消灭第1个和第3个敌人后,再按下B键消灭第二个敌人。所以最少按2次。
第二个关卡,按下3次B键分别消灭这3个敌人。
第三个关卡,按下3次B键分别消灭这3个敌人。也可以按3次A建,敌人剩余承受伤害的变化为:[1, 2，3]-&gt;[1,1,2]→&gt;[,0, 1] -&gt; [0,0, 0]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>贪心即可。策略如下：如果2个敌人的血量为1，则是使用A建；否侧使用B键，以此类推。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>T<span class="token punctuation">,</span> N <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>
    D <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    D<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    cnt <span class="token operator">=</span> <span class="token number">0</span>
    i <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;</span> N<span class="token punctuation">:</span>
        <span class="token keyword">if</span> D<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> D<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            cnt <span class="token operator">+=</span> <span class="token number">1</span>
            i <span class="token operator">+=</span> <span class="token number">2</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
    cnt <span class="token operator">+=</span> N <span class="token operator">-</span> i
    <span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="团建规划" tabindex="-1"><a class="header-anchor" href="#团建规划" aria-hidden="true">#</a> 团建规划</h2><p>又到了团建的时间,多多君负责安排这次的团建活动。</p><p>多多君准备了三个活动（分别编号A、B和C)，每个活动分别有人数上限以及每个人参加的费用。</p><p>参加团建的有N个人(分别编号1~N）,每个人先投票选择若干个意向的活动,最终每个人只能参加其中一个。</p><p>多多君收集完投票结果后,发现如何安排成为了大难题:如何在满足所有人的意向的情况下,使得活动的总费用最少。</p><p>于是多多君找到了擅长编程的你,希望你能帮助找到个合理的团建计划。</p><p><strong>输入描述</strong></p><p>第一行,一个整数N,代表准备参加活动的人数。(1&lt;=N&lt;=100 )</p><p>接下来N行,每行一个由&quot;ABC&quot;组成的字符串,其中第i行表示第i个人投票了哪几个活动。</p><p>(输入保证字符串非空,且由大写的&quot;ABC&quot;字符组成)</p><p>最后3行,每行两个整数,分别表示三个活动的人数上限以及每个人参加的费用。</p><p>(人数上限以及参与活动的费用均为不超过100的正整数)</p><p><strong>输出描述</strong></p><p>输出共2行</p><p>如果能满足所有人的要求,第一行输出&quot;YES”,第二行输出最少的总费用。</p><p>如果不能满足所有人的要求,第一行输出&quot;NO，第二行输出最多能满足多少人。</p><p><strong>示例</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5
A
B
C
AB
ABC
2 1
2 2
2 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>YES
9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例2</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5
A
B
C
AB
AB
1 1
2 2
3 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NO
4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p>`,49),k={href:"https://zhuanlan.zhihu.com/p/127046673",target:"_blank",rel:"noopener noreferrer"},r=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque

INF <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;inf&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">:</span>
    edges<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
    edges<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">spfa</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span><span class="token punctuation">:</span>
    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    in_queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    pre_edge <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    dist<span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>source<span class="token punctuation">)</span>
    in_queue<span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
        u <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
        in_queue<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
        visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>
            v<span class="token punctuation">,</span> c<span class="token punctuation">,</span> w <span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> c <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span>
                dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w
                pre_edge<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> i
                <span class="token keyword">if</span> <span class="token keyword">not</span> in_queue<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
                    in_queue<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">return</span> visited<span class="token punctuation">[</span>sink<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">,</span> pre_edge

<span class="token keyword">def</span> <span class="token function">mcmf</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span><span class="token punctuation">:</span>
    max_flow<span class="token punctuation">,</span> min_cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        res<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> pre_edge <span class="token operator">=</span> spfa<span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> res<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        flow <span class="token operator">=</span> INF
        u <span class="token operator">=</span> sink
        <span class="token keyword">while</span> u <span class="token operator">!=</span> source<span class="token punctuation">:</span>
            i <span class="token operator">=</span> pre_edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span>
            flow <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>flow<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            u <span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        max_flow <span class="token operator">+=</span> flow
        min_cost <span class="token operator">+=</span> flow <span class="token operator">*</span> dist<span class="token punctuation">[</span>sink<span class="token punctuation">]</span>
        u <span class="token operator">=</span> sink
        <span class="token keyword">while</span> u <span class="token operator">!=</span> source<span class="token punctuation">:</span>
            i <span class="token operator">=</span> pre_edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span>
            edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-=</span> flow
            edges<span class="token punctuation">[</span>i <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> flow
            u <span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> max_flow<span class="token punctuation">,</span> min_cost


n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    people<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
costs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    num<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    nums<span class="token punctuation">[</span>i <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num
    costs<span class="token punctuation">[</span>i <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c

graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
edges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

peo_acv_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">:</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">:</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">:</span>n<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add_edge<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#源点到达人的边</span>
    <span class="token comment">#当前这个人感兴趣的活动</span>
    activ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> c <span class="token keyword">in</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
        activ<span class="token punctuation">.</span>append<span class="token punctuation">(</span>peo_acv_map<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment">#人到达活动的边</span>
    <span class="token keyword">for</span> act <span class="token keyword">in</span> activ<span class="token punctuation">:</span>
        add_edge<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> costs<span class="token punctuation">[</span>act<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">#活动到汇点</span>
add_edge<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
add_edge<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
add_edge<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

n <span class="token operator">+=</span> <span class="token number">5</span>
<span class="token comment"># 从源点到汇点的最大流和最小费用</span>
source <span class="token operator">=</span> <span class="token number">0</span>
sink <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>

max_flow<span class="token punctuation">,</span> min_cost <span class="token operator">=</span> mcmf<span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span>
<span class="token keyword">if</span> max_flow <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;YES&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>min_cost<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;NO&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>max_flow<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="客流量分析" tabindex="-1"><a class="header-anchor" href="#客流量分析" aria-hidden="true">#</a> 客流量分析</h2><p>多多君开了一家自助餐厅，为了更好地管理库存，多多君每天需要对之前的客流量数据进行分析,并根据客流量的平均数和中位数来制定合理的备货策略。</p><p><strong>输入描述</strong></p><p>输入共两行:</p><p>第一行一个整数N,表示餐厅营业总天数(0&lt;N&lt;=200,000),</p><p>第二行共N个整数,分别表示第i天的客流量R:(0= R:1, 000, 000)。</p><p><strong>输出描述</strong></p><p>输出共两行:</p><p>第一行长度为N,其中第i个值表示前i天客流量的平均值,第二行长度为N,其中第i个值表示前i天客流量的中位数。</p><p>示例1</p><p>输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5
1 2 3 4 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 2 2 3 4
1 2 2 3 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>动态寻找数组的平均数和中位数。</p><p>平均数比较简单，使用前缀和即可。</p><p>使用大小堆进行模拟求解中位数稍微麻烦一些。首先，我们需要明确中位数的性质：如果一个数是中位数，那么在这个数组中，大于中位数的数目和小于中位数的数目，要么相等，要么就相差一。因此，我们可以利用堆维护这个数据结构，大顶堆存放前半部分较小的数，小顶堆存放后半部分较大的数。具体来说：</p><ul><li>当元素总数为奇数个时，大顶堆比小顶堆多一个元素，中位数就是大顶堆堆顶。</li><li>当元素总数为偶数个时，大顶堆和小顶堆元素个数相同，此时中位数就是大顶堆和小顶堆堆顶的平均数。</li></ul><p>例如，对于数组[1, 2, 3, 4, 10]，我们可以使用大顶堆存放前三个较小的数[1, 2, 3]，小顶堆存放后两个较大的数[4, 10]，则中位数为(3+4)/2=3.5。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> heapq
<span class="token keyword">from</span> _decimal <span class="token keyword">import</span> Decimal

N <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

pres <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

small <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
large <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>large<span class="token punctuation">)</span><span class="token punctuation">:</span>
        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>large<span class="token punctuation">,</span> <span class="token operator">-</span>heapq<span class="token punctuation">.</span>heappushpop<span class="token punctuation">(</span>small<span class="token punctuation">,</span> <span class="token operator">-</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>small<span class="token punctuation">,</span> <span class="token operator">-</span>heapq<span class="token punctuation">.</span>heappushpop<span class="token punctuation">(</span>large<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>large<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Decimal<span class="token punctuation">(</span><span class="token punctuation">(</span>large<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> small<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">&quot;1.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rounding<span class="token operator">=</span><span class="token string">&quot;ROUND_HALF_UP&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Decimal<span class="token punctuation">(</span>large<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">&quot;1.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rounding<span class="token operator">=</span><span class="token string">&quot;ROUND_HALF_UP&quot;</span><span class="token punctuation">)</span>

aves <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
mids <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
pres<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
add<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pres<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> pres<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    add<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    aves<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span>pres<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">&quot;1.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rounding<span class="token operator">=</span><span class="token string">&quot;ROUND_HALF_UP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    mids<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>aves<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mids<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function d(v,m){const p=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("我们将人、活动都想象成图中的一个节点，当一个人x 对 一个活动a感兴趣的时候，我们就认为存在一条边 x->a，并且边权为活动开销。我们再抽象一个源点st和汇点ed，将问题转换成，从st到每个人都存在一条流量为1的边，判断最后达到汇点的最小开销，这就是一个最小费用流的问题了，直接套 MCMF模板(spfa求增广路) 就好了，想要仔细了解这个算法的同学可以阅读这篇文章："),n("a",k,[s("算法学习笔记(31): 最小费用最大流 - 知乎 (zhihu.com)"),l(p)])]),r])}const g=t(i,[["render",d],["__file","pdd20230312.html.vue"]]);export{g as default};
