import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<h1 id="字节0512" tabindex="-1"><a class="header-anchor" href="#字节0512" aria-hidden="true">#</a> 字节0512</h1><h2 id="竞技场" tabindex="-1"><a class="header-anchor" href="#竞技场" aria-hidden="true">#</a> 竞技场</h2><p>曾经的我不过是一个草民，混迹市井，默默无名。直到我被罗马的士兵从家乡捉走丢进竞技场....</p><p>对手出现了，我架紧盾牌想要防御，只觉得巨大的冲击力有如一面城墙冲涌而来，击碎了我的盾牌，我两眼发管，沉重的身躯轰然倒地。</p><p>—我好想逃</p><p>但罗马最大的竞技场，哪有这么容易逃得掉。工程师们早就在地上装了传送机关，虽不会伤人，却会将站在上面的人传到它指向的位置。若是几个传送机关围成一个环，不小心踩在上面的人就会被一圈圈的反复传送...想到这里，我不由得打了个寒颤。必须避开这些危险的地方!</p><p><strong>输入描述</strong></p><p>第一行输入两个整数 n 和 m，表示迷宫的长和宽。</p><p>接下来 n 行，每行 m 个字符，用于描述迷宫构造，每个字符可能为以下几种.(小数点) 表示空地，玩家在空地时可以选择往[上,下,左,右] 中的某个方向移动一格</p><p>U,D,L,R 分别表示朝向[上,下,左,右]的传送带，站在传送带上的人会被强制移动到其指向的下一个位置</p><p>如果下一个位置还是传送带，会被继续传下去</p><p>如果传送带指向迷宫外，玩家会撞在墙上昏过去，游戏结束，无法再到达出口</p><p>O表示迷宫出口</p><p><strong>输出描述</strong></p><p>输出一个数字，表示迷宫中有多少个位置，当玩家位于此处时，无论接下来如何移动都无法再到达出口(传送带、空地、出口都算一个位置)</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5 5
....
.PRD
.U.DR
.ULL.
....O
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>备注</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1&lt;=n,m &lt;= 10^5
1&lt;=n*m&lt;=10^5
保证每个迷宫中有且仅有一个出口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>从&#39;O&#39;出发开始搜索，判断哪些点是可达的即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

dir_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;U&#39;</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;L&#39;</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;R&#39;</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
dirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
vst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment"># 应该从终点出发 判断哪些点是可达的</span>
res <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> res
    res <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> <span class="token builtin">dir</span> <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>
        ni<span class="token punctuation">,</span>nj <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token builtin">dir</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token builtin">dir</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> ni <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> nj <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> ni <span class="token operator">&gt;=</span> n <span class="token keyword">or</span> nj <span class="token operator">&gt;=</span> m <span class="token keyword">or</span> vst<span class="token punctuation">[</span>ni<span class="token punctuation">]</span><span class="token punctuation">[</span>nj<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>
        <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>ni<span class="token punctuation">]</span><span class="token punctuation">[</span>nj<span class="token punctuation">]</span> <span class="token keyword">in</span> dir_map<span class="token punctuation">:</span>
            pd <span class="token operator">=</span> dir_map<span class="token punctuation">[</span>matrix<span class="token punctuation">[</span>ni<span class="token punctuation">]</span><span class="token punctuation">[</span>nj<span class="token punctuation">]</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ni <span class="token operator">+</span> pd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nj <span class="token operator">+</span> pd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>
            vst<span class="token punctuation">[</span>ni<span class="token punctuation">]</span><span class="token punctuation">[</span>nj<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
            dfs<span class="token punctuation">(</span>ni<span class="token punctuation">,</span>nj<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            vst<span class="token punctuation">[</span>ni<span class="token punctuation">]</span><span class="token punctuation">[</span>nj<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
            dfs<span class="token punctuation">(</span>ni<span class="token punctuation">,</span> nj<span class="token punctuation">)</span>



<span class="token comment">#这个找到了 有数字的点</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">:</span>
            vst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
            dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token operator">*</span>m <span class="token operator">-</span> res<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组和的最大值" tabindex="-1"><a class="header-anchor" href="#数组和的最大值" aria-hidden="true">#</a> 数组和的最大值</h2><p>给定整数数组，我们称其中连续的0个或多个整数为一个子数组，求删除任一元素后，新数组中长度为k的子数组的和的最大值</p><p><strong>输入描述</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>第一行输入为N和K，N代表数组长度，K代表子数组长度
第二行输入为N个整数，依次为数组的每个元素
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出描述</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>一个整数S，代表所有可能新数组中长度为K的子数组的和的最大值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5 3
2 1 3 -1 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><p>选择删除第四个元素，新数组为2 1 3 4，其长度为3的子数组的和是8</p><p><strong>备注</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>50% case: 1 &lt;= K&lt; N &lt;= 100, -100&lt;= arr[i]&lt;= 100
100% case: 1 &lt;= K &lt; N &lt;= 1e6,-100&lt;= arr[1]] &lt;= 100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>由于子数组的长度固定为k，且最多删除一个数字，因此，我们只需要找到所有长度为K+1的子数组，然后删除该子数组中的最小值即可。所以这个问题可以使用单调队列来优化。时间复杂度落在O(n)。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> heapq
<span class="token keyword">from</span> collections <span class="token keyword">import</span> deque

N<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># 滑动窗口</span>
<span class="token comment"># 维护窗口位K+1， 当前窗口的最值为： 总和-最小值，所以只需要用一个单调队列维护当前窗口最小值即可</span>

res <span class="token operator">=</span> <span class="token number">0</span>

q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
curSum <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>
    curSum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> q <span class="token keyword">and</span> i<span class="token operator">-</span>k <span class="token operator">&gt;</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span> curSum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> q <span class="token keyword">and</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
        q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">if</span> i<span class="token operator">&gt;=</span> k<span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> curSum <span class="token operator">-</span>nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="染色的树" tabindex="-1"><a class="header-anchor" href="#染色的树" aria-hidden="true">#</a> 染色的树</h2><p>珂朵莉很喜欢蓝色，她认为蓝色是代表幸福、真爱、智 慧的颜色。</p><p>给你一棵n个节点的树，编号从1到n，根是1号节点。初始时，树上的每个节点都是红色，你需要将尽可能多的节点染成蓝色，使每棵子树的蓝色节点数为奇数。</p><p><strong>输入描述</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>第一行输入一个正整数n。
接下来 n-1行，每行两个正整数u,v，表示u号节点和v号节点之间有一条边。
保证输入是一棵树。
1&lt;=n&lt;=10^5
1&lt;=u,v&lt;=n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出描述</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输出一个长度为n字符串，表示染色后的树。如果第i个字符是R，则表示树上的第i号节点是红色，如果i个字符是B，则表示树上的第i号节点是蓝色。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>6
1 2
6 3
5 2
2 4
3 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BBRBBB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>由于每个子树的蓝色节点的数量为蓝色，因此，</p><ol><li>叶子节点一定是蓝色。</li><li>每棵子树的蓝色节点的数量必须为奇数，因此，如果当node的子节点的蓝色节点的数量为偶数的时候，那么node节点也可以变为蓝色，否则则为就还是红色。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict

n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
nxs <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>

colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;0&#39;</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    u<span class="token punctuation">,</span>v <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    nxs<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    nxs<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token punctuation">)</span>

<span class="token comment">#叶子结点一定是 蓝色</span>
<span class="token comment"># 如果i以node为根的子树的孩子节点的蓝色数量是 奇数， 那么 全部染成蓝色</span>
<span class="token comment"># 返回的时候，返回的是蓝色节点的数量</span>

<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nxs<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        colors<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;B&#39;</span>
        <span class="token keyword">return</span> <span class="token number">1</span>

    cnt <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> nx <span class="token keyword">in</span> nxs<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> nx <span class="token operator">!=</span> pre<span class="token punctuation">:</span>
            cnt <span class="token operator">+=</span> dfs<span class="token punctuation">(</span>nx<span class="token punctuation">,</span> node<span class="token punctuation">)</span>

    <span class="token comment"># cnt node子节点 蓝色的数量</span>
    <span class="token keyword">if</span> cnt <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        colors<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;B&#39;</span>
        cnt <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        colors<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;R&#39;</span>

    <span class="token keyword">return</span> cnt

dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="金库的密码锁" tabindex="-1"><a class="header-anchor" href="#金库的密码锁" aria-hidden="true">#</a> 金库的密码锁</h2><p>小A抢劫了一家银行，现在他要做的就是打开金库的密码锁。密码是一串长度为n的小写字母，小A还以一个粗心的警卫那里得到了一张纸条，上面有一则关于密码的线索，首先将字母a到z编号为0到25编号。纸条上共有n个整数ai，其中a1表示密码里第一个字母的编号，若i&gt;1的话就表示第i个字母和第i-1个字母编号的差值，例如，a2就代表密码中第一个字母个第二个字母编号的差值，若密码是acb，那么纸条上的数字就是 0，2，1。</p><p>小A决定找出与纸条中的数据相匹配的可能的密码的个数，现在请你帮助小4计算这个数字，由于结果可能很大，只需要输出对1000000007取模后的结果即可。</p><p><strong>输入描述</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>第一行输入一个正整数n，代表纸条上数字的个数
第二行给出n个整数ai，代表纸条上的数
1&lt;=n&lt;=10^5
0&lt;=ai&lt;=25
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出描述</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在一行中输出可能的密码个数对 1000000007的余数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1
4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><p>唯一的可能是e</p><p><strong>示例2</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
12 4 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>动态规划。</p><p>f(i,j)表示从第i个字符往后考虑，上一个字符是j的情况下，所有组合数的数量。</p><p>每个元素可以选择的组合方式有 j-A[i] 或者 j+A[i]，我们需要判断这两种方式的合法性。</p><p>转移就是： f(i,j) = f(i+1,j-A[i]) + f(i+1,j+A[i])。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    mod <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    dp[i][j]: 
        从i往后考虑，前一个字符是j，组合数有多少
        
        = dp[i+1][cur1] + dp[i+1][cur2]
            cur1 = j+A[i], cur2 = j-A[i]
            0&lt;=cur1, cur2&lt;=25
    
    &#39;&#39;&#39;</span>

    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            cur1<span class="token punctuation">,</span>cur2 <span class="token operator">=</span> j<span class="token operator">+</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token operator">-</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>cur1<span class="token operator">&lt;=</span><span class="token number">25</span><span class="token punctuation">:</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cur1<span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>cur2<span class="token operator">&lt;=</span><span class="token number">25</span><span class="token punctuation">:</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cur2<span class="token punctuation">]</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%=</span> mod

    <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

solv<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,84),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","zj20230512.html.vue"]]);export{r as default};
