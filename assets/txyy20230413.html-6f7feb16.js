import{_ as n,o as s,c as a,a as e}from"./app-d0f06d78.js";const t={},p=e(`<div class="custom-container tip"><p class="custom-container-title">前言</p><p>本场编程题的难度还是挺大的，涉及到比较多的数学知识。当然对于我而言，数学题在考场上最好的方式就是找规律，而不是去做推导。不过前提是你得意识到这是一个数学题，而不是上来直接dfs.......</p></div><h2 id="小红的好数组" tabindex="-1"><a class="header-anchor" href="#小红的好数组" aria-hidden="true">#</a> 小红的好数组</h2><p>小红定义一个数组为&quot;好数组”，当且仅当该数组满足以下条件</p><p>1.数组仅由0、1、2三种元素组成</p><p>2.数组相邻的元素不相等。</p><p>例如:121.2.0.1是好数组。 小红定义一个数组的“陡峭值&quot;”为该数组相邻元素的差的绝对值之和。例如，[2,1,2,0,1]的陡峭值为|2-1|+|1-2|+|2-0|+|0-1| = 5.小红想知道，长度为n的所有好数组的陡峭值之和是多少? 由于答案过大，请对10^7取模，数据汇围:2&lt;=n&lt;=10^9</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>共有[0,1],[1,0],[0,2],[2,0],[1,2],[2,1]这六个好数组。陡峭值之和为1+1+2+2+1+1=8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>数学题。找规律：</p><p>n=2, f(n) = 8</p><p>n=3, f(n) = 32</p><p>n=4, f(n) = 96</p><p>....</p><p>f(n) = (n-1)*2^(n+1)</p><p>但是n特别大，所以需要用到快速幂来计算。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fastMi</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            res <span class="token operator">=</span> res <span class="token operator">*</span> x <span class="token operator">%</span> m
        x <span class="token operator">=</span> x <span class="token operator">*</span> x <span class="token operator">%</span> m
        n <span class="token operator">//=</span> <span class="token number">2</span>
    <span class="token keyword">return</span> res

n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
mod <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span><span class="token number">7</span>
ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> fastMi<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>mod<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小红的二叉树" tabindex="-1"><a class="header-anchor" href="#小红的二叉树" aria-hidden="true">#</a> 小红的二叉树</h2><p>小红拿到了一颗二叉树，定义每个节点的价值为子树节点乘积的末尾0的数量。现在请你返回一颗二叉树，树的结构和给定二叉树相同，将每个节点的权值替换为该节点的价值。</p><p>二叉树的节点不超过10^5。</p><p>二叉树每个节点的权值都是不超过10^9的正整数。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{2,5,10,#,#,4,5}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{3,0,2,#,#,0,0}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>小红拿到的树
                       2
                     /   \\
                    5     10
                         /  \\
                        4    5
需要返回的树
					   3
					  /  \\
					 0    2
					     / \\
					    0   0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>这个题本身就是一个二叉树的遍历而已，没有什么特别的，但是每个数的规模很大，不能直接相乘获取末尾0。因此需要观察一个规律，不难发现，末尾0的数量取决于该数字的2和5的因子的最小值，因此我们遍历树的时候向上返回以当前节点为根的子树的2和5的因子数量即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">getTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&#39;&#39;&#39;求n的2和5的因子数量&#39;&#39;&#39;</span>
        <span class="token keyword">def</span> <span class="token function">counts</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            count_2 <span class="token operator">=</span> <span class="token number">0</span>
            count_5 <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">while</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                count_2 <span class="token operator">+=</span> <span class="token number">1</span>
                n <span class="token operator">//=</span> <span class="token number">2</span>
            <span class="token keyword">while</span> n <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                count_5 <span class="token operator">+=</span> <span class="token number">1</span>
                n <span class="token operator">//=</span> <span class="token number">5</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span>count_2<span class="token punctuation">,</span> count_5<span class="token punctuation">]</span>

        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
            cur <span class="token operator">=</span> counts<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            l<span class="token punctuation">,</span> r <span class="token operator">=</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
            cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            node<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
            <span class="token keyword">return</span> cur

        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>
        <span class="token keyword">return</span> root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","txyy20230413.html.vue"]]);export{r as default};
