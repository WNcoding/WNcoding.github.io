import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<h1 id="华为0506笔试" tabindex="-1"><a class="header-anchor" href="#华为0506笔试" aria-hidden="true">#</a> 华为0506笔试</h1><div class="custom-container tip"><p class="custom-container-title">前言</p><p>第一题感觉不是个很难的题目，但是没搞懂题目要干嘛........</p><p>第二题是个纯纯的牛马题，就是要恶心人的，实际上就是个大模拟。</p><p>第三题还算是比较正常的板子。</p></div><h2 id="_1、多孔补偿策略" tabindex="-1"><a class="header-anchor" href="#_1、多孔补偿策略" aria-hidden="true">#</a> 1、多孔补偿策略</h2><p>喷墨扫描打印的基本原理是同步控制喷头在x方向滑动、纸张在y方向滑动、以及对应xy坐标的喷墨开关来实现图像像素点的逐点打印。</p><p>某喷墨式黑白打印机在使用中，由于喷墨头部分小孔经常堵塞导致打印图像存在一些像素丢失的问题。针对此问题，现在有一种多孔补偿策略，方案描述如下:</p><p>1)检测喷墨头堵塞的小孔位置。</p><p>2)根据1中检测的堵孔位置，计算一种两次扫描补偿策略，通过第二次扫描对丢失的像素进行打印补偿。该算法需要输出第二次扫描使能的小孔位置、扫描整体平移的小孔数以及平移方向，概念示意如下(x表示堵塞的小孔):</p><p>3)第二次扫描时，如果同一个方向存在多个移动方案都可以满足，则移动孔位最少的方案。</p><p>4)注意对于第一次扫描打印过的像素点，第二次扫描时不能重复打印，即补偿策略不会破坏第一次扫描打印的内容。</p><p><strong>解答要求</strong></p><p>时间限制: C/C++ 1000ms,其他语言: 2000ms</p><p>内存限制: C/C++ 256MB,其他语言: 512MB</p><p><strong>输入</strong></p><p>第一行为喷墨头水平排列的小孔个数N，10&lt;=N&lt;=1024;</p><p>第二行为N个bit的序列，用双字节十六进制数表示，如果N超过16，则用多个双字节十六进制表示，它们之间用空格分割。其中0表示该bit对应位置的小孔堵塞的孔，1表示正常的孔。有效bit从第一个十六进制的最高位开始计算,序列尾部如果有无效bit则用1填充。</p><p><strong>输出</strong></p><p>第一行输出可以完成补偿的方案个数，同一个方向只需要给出移位最少的方案。如果无法找到多孔补偿策略或者不需要补偿，输出0。</p><p>第二行开始，每两行为一个数据分组，分组中</p><p>1)第一行为相对于喷墨头原始位置平移方向和平移的小孔个数，用+-X表示，向右为+，向左为-;</p><p>2） 第二行为N个bit的序列，用’0‘或’1‘的连续字符序列表示，其中’0‘表示该bit对应位置的小孔关闭喷墨，’1‘表示打开喷墨;</p><p>3)如果存在多个方案，先输出向右移动的方案;</p><p><strong>样例1</strong></p><p>输入:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>14
0xE77F
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
+2
01100010000000
-2
00000110001000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入中第二行的十六进制数0xE77F，其中只有前14个bit有效，转换为二进制序列为11100111011111
输出表示有2种补偿方案，分别是右移2个小孔和左移2个小孔，对应的’0‘/’1‘连续字符序列表示所有孔的开关状态.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例2</strong> 输入:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>18
0x677F 0XFFFF
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1
-2
001001100010000000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释: 输入中第二行的十六进制数0x677F 0xFFFF，其中只有前18个bit有效转换为二进制序列为011001110111111111 输出表示有1种补偿方案，左移2个小孔，对应的‘0’/’1‘连续字符序列表示所有孔的开关状志。 \`\`\` <strong>提示</strong></p><p>输入的合法性由题目保证</p><h2 id="_2、表达式计算" tabindex="-1"><a class="header-anchor" href="#_2、表达式计算" aria-hidden="true">#</a> 2、表达式计算</h2><p>给定一个字符串形式的表达式，保证每个字符串表达式中仅包含加(+)这1种运算符，计算并输出表达式结果.</p><p>要注意的是，+号两边的数据仅可能包含数字字符、小数点字符与特殊字符，特殊字符包括!@#，这些特殊字符的加法运算有特别的规则:</p><p>!+!=0 !+@=13 !+#=4 @+@=7 @+#=20 #+#=5</p><p><strong>注意</strong> \`\`\` 1.保证每个表达式仅包含一个运算符 2.保证表达式一定可运算且有数据结果 3.保证运算符两边数据有效(不会出现包含两个小数点之类的无效数据) 4.表达式内不存在空格 5.特殊字符的加法运算符合交换律 6.如果表达式中包含特殊字符，则运算中不会出现数字与特殊字符的加法运算 7.表达式两边的数据均不以0开头，比如不会出现这样的表达式0250+0110 \`\`\` <strong>解答要求</strong></p><p>时间限制: C/C++ 1000ms,其他语言: 2000ms</p><p>内存限制: C/C++ 256MB,其他语言: 512MB</p><p><strong>输入</strong></p><p>第一行: 代表字符串长度(长度在[1,1000]之间)</p><p>第二行:代表一个字符串表达式</p><p><strong>输出</strong> 输出一行，输出表达式结果</p><p>注意: 小数最后位如果为0则省略，如 结果250.010则输出250.01，结果250.0则省略为250;同时，如果计算结果为”0250”，也需以最简化形式”250”输出。</p><p><strong>样例1</strong> \`\`\` 输入:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>15
123.45#1+126.53@
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>250.0001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#+@=20，即进2位，表达式结果为250.0001
坚式运算如下
123.45#1
126.53@
————————
250.0001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例2</strong></p><p>输入:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>7
1#3+1#0.4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>253.4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#+#=5，即253.4
坚式运算如下
1#3
1#0.4
——————
253 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>将字符串分成 <strong>整数</strong>和 <strong>小数</strong> 两个部分，分别找到特殊字符的位置，替换成0，并且计算出特殊字符对应应该添加的值即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

a<span class="token punctuation">,</span> b <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;+&quot;</span><span class="token punctuation">)</span>

sc <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
sr <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">5</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token string">&#39;.&#39;</span> <span class="token keyword">in</span> a<span class="token punctuation">:</span>
    az<span class="token punctuation">,</span>ax <span class="token operator">=</span> a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    az<span class="token punctuation">,</span>ax <span class="token operator">=</span> a<span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span>

<span class="token keyword">if</span> <span class="token string">&#39;.&#39;</span> <span class="token keyword">in</span> b<span class="token punctuation">:</span>
    bz<span class="token punctuation">,</span> bx <span class="token operator">=</span> b<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    bz<span class="token punctuation">,</span> bx <span class="token operator">=</span> b<span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span>


add <span class="token operator">=</span> <span class="token number">0</span>

<span class="token comment">#判断特殊字符是在前面还是后面</span>
<span class="token keyword">if</span> <span class="token string">&#39;!&#39;</span> <span class="token keyword">in</span> az <span class="token keyword">or</span> <span class="token string">&#39;@&#39;</span> <span class="token keyword">in</span> az <span class="token keyword">or</span> <span class="token string">&#39;#&#39;</span> <span class="token keyword">in</span> az<span class="token punctuation">:</span>
    <span class="token comment">#特殊前面,从最后面往前面对齐</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>az<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> az<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>az<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> sc<span class="token punctuation">:</span>
            cur <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>az<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>az<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bz<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>bz<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">in</span> sr<span class="token punctuation">:</span> cur <span class="token operator">=</span> sr<span class="token punctuation">[</span><span class="token punctuation">(</span>az<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>az<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bz<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>bz<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>cur <span class="token operator">=</span> sr<span class="token punctuation">[</span><span class="token punctuation">(</span>bz<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>bz<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> az<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>az<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

            add <span class="token operator">=</span> cur <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> c <span class="token keyword">in</span> sc<span class="token punctuation">:</span>
                az <span class="token operator">=</span> az<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span>
                bz <span class="token operator">=</span> bz<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span>

            <span class="token keyword">break</span>

<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment">#特殊字符在后面，从0开始匹配</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ax<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> ax<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> sc<span class="token punctuation">:</span>
            cur <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ax<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> bx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">in</span> sr<span class="token punctuation">:</span> cur <span class="token operator">=</span> sr<span class="token punctuation">[</span> <span class="token punctuation">(</span>ax<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> bx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span> cur <span class="token operator">=</span> sr<span class="token punctuation">[</span> <span class="token punctuation">(</span>bx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ax<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

            add <span class="token operator">=</span> cur <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> c <span class="token keyword">in</span> sc<span class="token punctuation">:</span>
                ax <span class="token operator">=</span> ax<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span>
                bx <span class="token operator">=</span> bx<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>

o1 <span class="token operator">=</span> az <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> ax
o2 <span class="token operator">=</span> bz <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> bx

res <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">float</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">float</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>
res <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-魔幻森林救公主" tabindex="-1"><a class="header-anchor" href="#_3-魔幻森林救公主" aria-hidden="true">#</a> 3. 魔幻森林救公主</h2><p>一名王子的未婚妻公主被抓到了魔幻森林中，王子需要去救她，魔幻森林危险重重，除了一些怪物之外，还有时隐时现的路障，王子只能绕过怪物、绕过出现的路障或者等路障消失之后通过。</p><p>魔幻森林是一个n*n大小的二维地图，森林中的k只怪物分别在各自的位置中。每个地图点都有一个路障的状态循环，状态循环以3个单位时间作为一个环，我们用0代表没有路障，用1代表有路障，如&#39;011&#39;表示初始单位时间路障消失，下一个单位时间路障出现，再下一个单位时间路障继续存在.</p><p>王子在每个单位时间可以向上、下、左、右某个方向移动一个地图单位，也可以选择不移动，如果王子移动方向上有怪物，或者王子移动目的地在下一个单位时间存在路漳，则不可以朝该方向移动，同时，如果王子当前位置在下一个单位时间会出现路障，那王子也不可以选择停在原地.</p><p>我们需要计算王子到达公主的位置的最短时间</p><p><strong>解答要求</strong></p><p>时间限制: C/C++ 1000ms,其他语言: 2000ms</p><p>内存限制: C/C++ 256MB,其他语言: 512MB</p><p><strong>输入</strong></p><p>第一行: 地图大小n (2 &lt;= n&lt;= 100)</p><p>第二行: 怪物数量k (0 &lt; k&lt;= n*n-2)</p><p>第三行: 怪物位置，每个位置包含row和col用于代表row行col例，用空格分开，位置之间用空格间隔，三个位置示例: row1 col1 row2 col2 row3 col3，地图左上角位置为0 0，输入保证所有位置合法</p><p>第四行: 公主位置和王子起始位置共两个位置，row1 col1 row2 col2</p><p>第五行开始的n行: 每行n个字符串空格分开，每个字符串长度固定为3，内容固定只有’0‘和&#39;1&#39;，表示每个地图点的路障的状态循环</p><p><strong>注意:</strong></p><p>1.输入数据保证一定能找到公主</p><p>2.输入数据保证 怪物位置与公主位置、王子起始位置不重合</p><p>3.输入数据保证 怪物位置、公主位置下，路障的状态循环一定为&#39;000&#39;，即路障一定不会出现</p><p>4.输入数据保证 王子起始位置的路障在第一个单位时间不会出现</p><p>5.输入数据保证 位置一定合法</p><p><strong>输出</strong></p><p>输出一个数字，代表找到公主花费的最短时间</p><p><strong>样例1</strong> \`\`\` 输入:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
1
1 1
2 2 0 0
000 010 010
000 000 000
101 000 000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>最快路王子移动顺序:(0,0)-&gt; (0,0)-&gt; (0,1)-&gt; (0,2)-&gt; (1,2)-&gt; (2,2)
另一条路 (时间6) :
(0,0)-&gt; (1,0)-&gt;(1,0)-&gt; (1,0)-&gt; (2,0)-&gt;(2,1)-&gt;(2,2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例2</strong> 输入:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
1
1 1
0 2 0 0
010 011 000
000 000 000
000 000 000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>最快路王子移动序:(0,0)-&gt;(1,0)-&gt;(0,0)-&gt; (0,1)-&gt;(02)
另一条路 (时间6) :
(0,0) -&gt;(1,0)-&gt; (2,0)-&gt; (2,1)-&gt;(2,2)-&gt; (1,2)-&gt;(0.2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>最短路的模型，但是要注意判断怪兽和障碍物的位置，并且每个位置可以原地踏步，由于每个点的障碍物变化是以3为周期的，所以每个位置最多只需要停留3次即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque

n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
monster <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>
    monster<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> lines<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    i <span class="token operator">+=</span> <span class="token number">2</span>

<span class="token comment"># 终点   起点</span>
ex<span class="token punctuation">,</span> ey<span class="token punctuation">,</span> sx<span class="token punctuation">,</span> sy <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

grid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    grid<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># x,y,time,wait_time</span>
    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    vst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
    dirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> time<span class="token punctuation">,</span> wait_time <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> x <span class="token operator">==</span> ex <span class="token keyword">and</span> y <span class="token operator">==</span> ey<span class="token punctuation">:</span>
            <span class="token keyword">return</span> time
        <span class="token keyword">for</span> <span class="token builtin">dir</span> <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>
            nx<span class="token punctuation">,</span> ny <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token builtin">dir</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token builtin">dir</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> nx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> ny <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> nx <span class="token operator">&gt;=</span> n <span class="token keyword">or</span> ny <span class="token operator">&gt;=</span> n <span class="token keyword">or</span> vst<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">)</span> <span class="token keyword">in</span> monster <span class="token keyword">or</span> grid<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>time<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            vst<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> time <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment">#最多可以等3次</span>
        <span class="token keyword">if</span> wait_time <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token keyword">and</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>time<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">:</span>
            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> time <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> wait_time <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>bfs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,99),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","hw20230506.html.vue"]]);export{r as default};
