import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<div class="custom-container tip"><p class="custom-container-title">前言</p><p>这套题比较符合阿里出题的尿性，总体都不是那种特别大的题，但是需要做一些数学分析和思维技巧。千万不要像个憨憨一样上来直接暴力解，不管数据.....</p></div><h2 id="_1-满子二叉树" tabindex="-1"><a class="header-anchor" href="#_1-满子二叉树" aria-hidden="true">#</a> 1.满子二叉树</h2><p>给定一棵二又树，试求这棵二叉树有多少个节点满足以该节点为根的子树是满二叉树?</p><p>我们定义一棵树是满二叉树，当且仅当每一层的节点数量都达到了最大值(即无法在这一层添加新节点)。</p><p><strong>输入描述</strong></p><p>第一行输入一个正整数<em>n</em>，代表节点的数量。 接下来的<em>n</em>行，第i行输入两个整数li和ri，代表<em>i</em>号节点的左儿子和右儿子。请注意，如果一个节点没有左儿子/右儿子，则对应的li和ri为-1。</p><p>1≤n≤10^5</p><p><strong>输出描述</strong></p><p>子树为满二又树的节点数量。</p><p><strong>样例11</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5
2 3
4 5
-1 -1
-1 -1
-1 -1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 2、3、4、5号节点的子树都是满二叉树
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>数据是10w，因此不能枚举所有节点去遍历，应该在一次遍历过程中，把所有节点都判断好。</p><p>那关键就是如何判断某个节点是满二叉树呢？<strong>以该节点为根的子树的节点数量n = 2^depth - 1。</strong></p><p>因此，整体思路如下：</p><ol><li>找到所有节点的高度。</li><li>dfs遍历每一个节点，向上返回的是 <strong>以该节点为根的子树的节点数</strong>。判断是否满足n = 2^depth - 1即可。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left
        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right

trees <span class="token operator">=</span> <span class="token punctuation">[</span>TreeNode<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    trees<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left <span class="token operator">=</span> trees<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token keyword">if</span> l <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token boolean">None</span>
    trees<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right <span class="token operator">=</span> trees<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token keyword">if</span> r <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token boolean">None</span>

heights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">getheights</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>
    heights<span class="token punctuation">[</span>node<span class="token punctuation">.</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>getheights<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> getheights<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">return</span> heights<span class="token punctuation">[</span>node<span class="token punctuation">.</span>val<span class="token punctuation">]</span>

getheights<span class="token punctuation">(</span>trees<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

res <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>
    cur <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    <span class="token keyword">global</span> res
    <span class="token keyword">if</span> cur <span class="token operator">==</span> <span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span>node<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
        res <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> cur

dfs<span class="token punctuation">(</span>trees<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-合法的三元组" tabindex="-1"><a class="header-anchor" href="#_2-合法的三元组" aria-hidden="true">#</a> 2.合法的三元组</h2><p>给定一个数组，请你计算有多少个三元组&lt; i,j,k &gt;满足0≤i&lt;j&lt;k&lt;n且</p><p>max(ai,aj,ak)−min(ai,aj,ak)=1。</p><p><strong>输入描述</strong></p><p>第一行输入一个正整数n。 第二行输入n个正整数ai</p><p>3≤n≤200000 1≤a≤10^9</p><p><strong>输出描述</strong></p><p>一个整数，代表合法的三元组数量。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><p>4</p><p>2 2 3 1</p><p><strong>输出</strong></p><p>2</p><p><strong>思路与代码</strong></p><p>这个题的关键你要解读出：max(ai,aj,ak)−min(ai,aj,ak)=1 的含义，其实等价于找到三个数，使得最小值为a，最大值为a+1，因此组合的情况有两种：</p><ol><li><p>a,a,a+1</p></li><li><p>a,a+1,a+1</p></li></ol><p>因此，使用哈希表统计每个数字的出现次数，排列组合求解即可。</p><p>由于n很大，所以不能直接套排列组合的公式计算，肯定是算不了的，因此不难发现，我们要统计的只是： k个数字中选择2个数字的组合数，那么等价于k*(k-1)/2。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter

n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

cnter <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token comment"># 求 x中选择2个数字的组合数</span>
<span class="token keyword">def</span> <span class="token function">Comb</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x<span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>

res <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> k <span class="token keyword">in</span> cnter<span class="token punctuation">:</span>
    <span class="token keyword">if</span> k<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">not</span> <span class="token keyword">in</span> cnter<span class="token punctuation">:</span> <span class="token keyword">continue</span>
    c1<span class="token punctuation">,</span> c2 <span class="token operator">=</span> cnter<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> cnter<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
    res <span class="token operator">+=</span> c1 <span class="token operator">*</span> Comb<span class="token punctuation">(</span>c2<span class="token punctuation">)</span> <span class="token operator">+</span> c2<span class="token operator">*</span>Comb<span class="token punctuation">(</span>c1<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-最小极差" tabindex="-1"><a class="header-anchor" href="#_3-最小极差" aria-hidden="true">#</a> 3.最小极差</h2><p>给定一个大小为<em>n</em>的数组，你需要选择恰好<em>k</em>个元素使每个元素分别进行一次如下操作:</p><ol><li>使该元素乘2。</li><li>使该元素除以2，向下取整。</li></ol><p>请注意，对于每个元素只能进行两种操作中的一种，且只能操作一次。 你需要使得k次操作后，数组的极差尽可能小。请你求出这个最小的极差。 提示:数组的极差指数组的最大值减去最小值</p><p><strong>输入描述</strong></p><p>第一行输入两个正整数n和k，代表数组长度以及选择的元素数量。 第二行输入n个元素，代表给定的数组。 1≤k≤n≤10^5 ，1≤ai≤10^9</p><p><strong>输出描述</strong></p><p>k次操作后，数组极差的最小值。</p><p><strong>样例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3 2 
2 1 5 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>一个比较吃技巧的题目。</p><p>核心点：必然是让最小的x个数字 *2，最大的k-x个数字 // 2。</p><p>所以我们可以枚举这个x，这样复杂度是O(n)的。</p><p>接下来我们只需要考虑，如此操作以后的最大值和最小值即可。不难发现，最大值必然是 max(a[x-1]*2, a[-1]//2, a[n-k-x-1])，同理，最小值必然是min(a[0] * 2, a[n-k-x]//2, a[x+1])。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> math <span class="token keyword">import</span> inf

n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>

ans <span class="token operator">=</span> inf

<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    MAX <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>n<span class="token operator">-</span>k<span class="token operator">+</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>n<span class="token operator">-</span>k<span class="token operator">+</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    MIN <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>n<span class="token operator">-</span>k<span class="token operator">+</span>x<span class="token punctuation">]</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> k <span class="token keyword">else</span> <span class="token builtin">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>
    ans <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> MAX <span class="token operator">-</span> MIN<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","al20230315.html.vue"]]);export{r as default};
