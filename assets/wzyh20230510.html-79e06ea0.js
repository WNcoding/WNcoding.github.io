import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<h1 id="微众银行-0510-笔试" tabindex="-1"><a class="header-anchor" href="#微众银行-0510-笔试" aria-hidden="true">#</a> 微众银行 0510 笔试</h1><h2 id="计数" tabindex="-1"><a class="header-anchor" href="#计数" aria-hidden="true">#</a> 计数</h2><p><strong>时间限制：</strong> 3000MS <strong>内存限制：</strong> 589824KB</p><p><strong>题目描述：</strong></p><p>给出四个非负整数L,R,X,Y，请计算有多少个非负整数N满足以下四个条件：1. N的二进制表示中1的个数不小于L2. N的二进制表示中1的个数不大于R3. N和X的按位与为X4. N和Y的按位或为Y</p><p>输入描述</p><p>第一行有一个正整数T(1≤T≤1000)，代表有多少组测试数据。接下来是T组测试数据，每组由一行构成。</p><p>每一组测试数据仅包含四个整数L,R,X,Y(0≤L≤R≤30,0≤X,Y≤2^30-1)</p><p>输出描述</p><p>输出一个整数，代表你求得的答案。</p><p>样例输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
2 3 8 62
2 4 2 3
3 5 20 61
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>样例输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>10
1
7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="吞吞大作战" tabindex="-1"><a class="header-anchor" href="#吞吞大作战" aria-hidden="true">#</a> 吞吞大作战</h2><p><strong>时间限制：</strong> 3000MS <strong>内存限制：</strong> 589824KB</p><p><strong>题目描述：</strong></p><p>吞吞大作战是球球大作战的x.0版本，此时球球并不能通过击败其他球球壮大自己，而是获得得分，每一个球球都有一个能量值a_i，能量大的球球可以击败能量小的球球，当一个球球被击败后，击败者可以获得b_i得分。但是为了和谐，每个球球最多只能击败m个其他球球，然后就会强制进入结算环节。数据保证不会有两个球球具有相同的能量值。 请问每个球球最终最多得分多少。</p><p><strong>输入描述</strong></p><p>输入第一行包含两个正整数n和m，表示球球的数量，和每个球球最多击败其他球球的数量。(1&lt;=n,m&lt;=1e5)</p><p>输入第二行包含n个非负整数，表示每个球球的能量值，每个数都不大于100000。</p><p>输入第三行包含n个正整数，表示每个球球的被击败后对手获得的得分，每个整数都不大于100000。</p><p><strong>输出描述</strong></p><p>输出包含n个整数，表示每个球球最终最多获得的分数。</p><p><strong>样例输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5 3
1 3 5 2 4
1 2 3 4 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0 5 11 1 7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>堆模拟。将球球按照能力大小排序，遍历球球数组。对于每个球球，只需要考虑能力值小于当前能量值的球球，且取前m大的权值，这个过程可以使用堆模拟。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
pwrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

balls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    balls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> pwrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    balls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    balls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> i

balls<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">import</span> heapq

heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>balls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> balls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">#权值和下标</span>
heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>
cur <span class="token operator">=</span> balls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pwr<span class="token punctuation">,</span> index <span class="token operator">=</span> balls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> balls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
    res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> cur
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span> <span class="token operator">&lt;</span> m<span class="token punctuation">:</span>
        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span><span class="token punctuation">[</span>pwr<span class="token punctuation">,</span> index<span class="token punctuation">]</span><span class="token punctuation">)</span>
        cur <span class="token operator">+=</span> pwr
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> pwr <span class="token operator">&gt;</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            heapq<span class="token punctuation">.</span>heappushpop<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">[</span>pwr<span class="token punctuation">,</span> index<span class="token punctuation">]</span><span class="token punctuation">)</span>
            cur <span class="token operator">-=</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            cur <span class="token operator">+=</span> pwr

<span class="token keyword">for</span> r <span class="token keyword">in</span> res<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="混乱的键盘" tabindex="-1"><a class="header-anchor" href="#混乱的键盘" aria-hidden="true">#</a> 混乱的键盘</h2><p><strong>时间限制：</strong> 3000MS <strong>内存限制：</strong> 589824KB</p><p><strong>题目描述：</strong></p><p>​ 小可每天都要将很多文件输入到电脑里面去，由于键盘长期的使用，导致键盘出现了一些bug,如果你连续敲击了某个键k次后，再次敲击该键位的话，却不会有任何的输入，这个bug可以通过两种方式解决，一种是在这个时候敲击另一个键位，或者是再敲击k次这个键位，从而使得这个bug 被修复。</p><p>现在小可又收到了一份文件，文件里面有着一堆这样的连续的需要被键入的文字，但是由于小可使用的键盘是特制的字符集巨大的键盘，所以她不能使用删除键来进行操作，所以小可想知道，如果她需要输入接下来这个文件，那么她需要以怎样的方式来敲击键盘？但如果你把小可需要输出的字符丢在她面前，那也过于冗长了，因此小可只想知道对于每个键小可需要敲击多少次。</p><p><strong>输入描述</strong></p><p>输入数据共n+1行</p><p>第一行输入2个整数 n,k，表示文件的连续段数目和产生 bug 的临界值。</p><p>接下来行每行2个正整数ai,bi，表示ai这个字符将会紧接着输入bi次。</p><p>对于所有的数据，1≤n,k≤10^5,ai≤10^9,bi≤10^9</p><p><strong>输出描述</strong></p><p>输出共m+1行（m为字符的种类数）</p><p>第一行 输出一个整数m，表示小可需要敲击的键位数。</p><p>接下来m行每行两个正整数ci,di,表示ci这个字符键被敲击了di次。注意此处需要按照ci大小从小往大的顺序输出。</p><p><strong>样例输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>6 4
1 3
1 3
2 1
1 9
2 2
2 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
1 27
2 21
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>样例解释首先一共需要用到1,2两种键，在1号键键入6次时，实际按了10次，键入9次时，实际按了17次，因此需要敲击1号键27次，同理可以得到2号键的敲击次数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>模拟题。观察规律可发现，可以将相邻且相同的字符的输入次数进行合并，如此一来，我们只需要考虑对于每个字符输入x次，需要按多少次键盘即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n<span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

ins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> a <span class="token operator">==</span> ins<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ins<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> b
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            ins<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        ins<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">get_times</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> num <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token operator">//</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> k <span class="token operator">+</span> num
    <span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token operator">//</span> k <span class="token punctuation">)</span> <span class="token operator">*</span> k <span class="token operator">+</span> num

dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> ai<span class="token punctuation">,</span>bi <span class="token keyword">in</span> ins<span class="token punctuation">:</span>
    <span class="token keyword">if</span> ai <span class="token keyword">not</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span> dic<span class="token punctuation">[</span>ai<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    dic<span class="token punctuation">[</span>ai<span class="token punctuation">]</span> <span class="token operator">+=</span> get_times<span class="token punctuation">(</span>bi<span class="token punctuation">)</span>


res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span>dic<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> dic<span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
res<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> ci<span class="token punctuation">,</span> di <span class="token keyword">in</span> res<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{} {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ci<span class="token punctuation">,</span> di<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54),o=[e];function c(i,u){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","wzyh20230510.html.vue"]]);export{k as default};
