import{_ as n,o as s,c as a,a as t}from"./app-d0f06d78.js";const p={},e=t(`<div class="custom-container tip"><p class="custom-container-title">前言</p><p>这场笔试的难度很低，有一定基础的同学不难争取全A。</p></div><h2 id="小王的密码本" tabindex="-1"><a class="header-anchor" href="#小王的密码本" aria-hidden="true">#</a> 小王的密码本</h2><p>小王在进行游戏大问关,有个关卡需要输入一个密码才能通过。密码获得的条件如下:在个密码本中,每页都有个由26个小写字母组成的若干位位密码，每一页的密码不同，需要从这个密码本中寻找这样的一个最长的密码，从它的末尾开始依次去掉一位得到的新密码也在密码本中存在。请输出符合该要求的密码，如果有多个符合要求的密码，则返回字典序最大的密码。若没有符合调节的密码，则返回空字符串。</p><p><strong>输入描述</strong></p><p>密码本由一个字符串数组组成，不同元素之间使用空格隔开，每一个元素代表密码本每一页的密码。</p><p><strong>输出描述</strong></p><p>一个字符串</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>h he hel hell hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;hello&quot;从末尾一次去掉一位得到的&quot;hell&quot;, &quot;hel&quot;,&quot;he&quot;和&quot;h&quot;在密码本中都存在。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例2</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>b eredderd bw bww bwwl bwwlm bwwln
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bwwln
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;bwwlm&quot;和&quot;bwwln&quot;从末尾一次去掉一位得到密码在密码本中都存在。但是&quot;bwwln&quot;比&quot;bwwlm&quot;字典序排序大，所以应该返回&quot;bwwln&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>备注</strong></p><p><strong>1 &lt;= 密码本的页数 &lt;= 10^3</strong></p><p><strong>1 &lt;= 每页密码的长度 &lt;= 10^3</strong></p><p><strong>思路与代码</strong></p><p>使用哈希表进行模拟即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">all</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">all</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    pwds <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ans <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
    <span class="token builtin">all</span> <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>pwds<span class="token punctuation">)</span>
    <span class="token keyword">for</span> s <span class="token keyword">in</span> pwds<span class="token punctuation">:</span>
        <span class="token keyword">if</span> check<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">all</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>
                ans <span class="token operator">=</span> s
            <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token keyword">and</span> s <span class="token operator">&gt;</span> ans<span class="token punctuation">:</span>
                ans <span class="token operator">=</span> s
    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小明定酒店" tabindex="-1"><a class="header-anchor" href="#小明定酒店" aria-hidden="true">#</a> 小明定酒店</h2><p>放暑假了，小明决定到某旅游景点游玩，他在网上搜索到了各种价位的酒店（长度为n的数组A），他的心理价位是x元，请帮他筛选出k个最接近x元的酒店（n&gt;=k&gt;=0），并由低到高打印酒店的价格。</p><p><strong>备注</strong></p><ol><li>酒店价格数组A和小明的心理价位x均为整形数据；（0&lt;n,k,x&lt;10000）</li><li>优先选择最接近心理价位的酒店；若两家酒店和心理价位差价相同，则选择价格较低的酒店。（比如100元和300元距离心理价位200元同样接近，此时选择100元）；</li><li>酒店价格可能相同重复。</li></ol><p><strong>输入描述</strong></p><p>第一行：n,k,x</p><p>第二行：A[0] A[1] A[2] ... A[n-1]</p><p><strong>输出描述</strong></p><p>由低到高打印筛选出的酒店价格</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>10 5 6
1 2 3 4 5 6 7 8 9 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4 5 6 7 8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>数组长度n=10，筛选个数k=4，目标价位x=6，当4和8距离x相同时，优先选择价格低的4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>构建价格差数组，直接排序，选择前k个即可。为了处理“差值相同选择价格小”的这个问题，我们排序的时候加多一个维度，也就是优先选择价格差进行排序，其次选择价格排序。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
A <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
ls <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> <span class="token punctuation">[</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span>
res<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="站点部署" tabindex="-1"><a class="header-anchor" href="#站点部署" aria-hidden="true">#</a> 站点部署</h2><p>当前IT部门支撑了子公司颗粒化业务，该部门需要实现为子公司快速开租建站的能力，建站是指在一个全新的环境部署一套IT服务。每个站点开站会由一系列部署任务项构成，每个任务部署完成时间都是固定和相等的，设为1。部署任务项之间可能存在依赖，假如任务2依赖任务1，那么等待任务1部署完，任务2才能部署。任务有多个依赖任务则需要等所有依赖任务都部署完该任务才能部署。没有依赖的任务可以并行部署，优先的员工们会做到完全并行无等待的部署。给定一个站点部署任务项和他们之间的依赖关系，请给出一个站点的最短开站时间。</p><p><strong>输入描述</strong></p><p>第一行是任务书taskNum，第二行是任务的依赖关系数relationNum</p><p>接下来 relationNum 行，每行包含两个id，描述一个依赖关系，格式为：IDi IDj，表示部署任务i部署完成了，部署任务j才能部署，IDi和IDj值的范围为：[0: taskNum)</p><p>注：输入保证部署任务之间的依赖不会存在环。</p><p><strong>输出描述</strong></p><p>一个整数，表示一个站点的最短开站时间</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5
5
0 4
1 2
1 3
2 3
2 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>一个简单的拓扑排序。由于题目保证不会成环，所以我们可以进行“计算拓扑排序的层数”即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    nxs <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span>
    indegre <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
        k<span class="token punctuation">,</span> v <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        nxs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
        indegre<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> indegre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

    res <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">+=</span> <span class="token number">1</span>
        size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>
        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            cur <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> nx <span class="token keyword">in</span> nxs<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">:</span>
                indegre<span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> indegre<span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nx<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,62),o=[e];function i(l,c){return s(),a("div",null,o)}const r=n(p,[["render",i],["__file","od20230310.html.vue"]]);export{r as default};
