import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<div class="custom-container tip"><p class="custom-container-title">前言</p><p>再次为0426的朋友默哀~</p><p>此处题目难度比较低，特别是最后一题，太不讲究了，搞得像第一题一样。</p></div><h2 id="连续空闲内存合并管理" tabindex="-1"><a class="header-anchor" href="#连续空闲内存合并管理" aria-hidden="true">#</a> 连续空闲内存合并管理</h2><p>动态内存管理根据用户的需求分配任意大小的内存，当用户释放内存时，被释放的内存回到池(堆)中供其他用户使用。现设计某实时操作系统计划的内存管理功能，请你实现被释放内存的回收合并模块，当经过一次内存释放操作后，请返回当前最大的连续内存块的起始位置，以及此连续内存的数量(块数)。若存在多个最大连续内存块，则返回编号最小的内存块信息。当前已经把连续内存，按块进行连续编号。</p><p><strong>解答要求</strong></p><p>时间限制:C/C++1000ms,其他语言:2000ms 内存限制:C/C++256MB其他语言:512MB</p><p><strong>输入</strong></p><p>输入:1,3,2,5 表示释放四块内存，ID分别为1.3.2.5，每块内存的大小为1个单位[预制条件]</p><p>函数执行前，所有内存均已被申请完毕，无空闲，不需考虑内存重复释放[取值范围]</p><p>内存ID编号:0&lt;ID&lt;2^31-1，单次释放的内存个数&lt;10000</p><p><strong>输出</strong></p><p>输出：1,3 经过回收处理后，当前可用的最大连续内存大小3，以及此内存的起始编号1. 说明:1,3,2,5四块内存，前面三块1,3,2为连续内存，合并后的连续内存数为3个单位起始编号为1，因此返回1,3</p><p><strong>样例1</strong></p><p><strong>输入</strong>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1,3,2,5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输出:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1,3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>解释:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1,3,2,5四块内存，前面三块1,3,2为连续内存，合并后的连续内存数为3个单位。起始编号为1，因此返回1,3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>样例2</strong></p><p><strong>输入</strong>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2,4,3,7,6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2,3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2,4,3,7,6，表示释放了5块内存，内存块编号分别为2、4、3、7、6。
经过回收合并后，2、3、4三块内存连续，可以合并为一块大内存，大小为3个单位
6、7两块内存连续，合井后的连续内存大小为2。
因此返回此时的最大连续内存的起始位置为2，内存大小为3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>模拟即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>

st<span class="token punctuation">,</span> mxlen <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span>
n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
index <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> index <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
    i <span class="token operator">=</span> index
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">break</span>
        i <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span> mxlen <span class="token operator">&lt;</span> i<span class="token operator">-</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>
        mxlen <span class="token operator">=</span> i<span class="token operator">-</span>index<span class="token operator">+</span><span class="token number">1</span>
        st <span class="token operator">=</span> index
    index <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">,</span>mxlen<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="海量日志抑制" tabindex="-1"><a class="header-anchor" href="#海量日志抑制" aria-hidden="true">#</a> 海量日志抑制</h2><p>程序运行日志是重要的运维手段，需要尽量记录下有效信息，避免无效日志，而”海量日志”就是一种比较典型的日志使用问题——大量打印相同或相似的内容，将有效日志淹没，还可能降低系统运行效率。因此，需要“海量日志”抑制机制，避免系统运行时产生“海量日志”问题。海量日志”定义: 10ms内(&lt;10ms)打印2条相同日志 (包含第2条均需要被抑制)，即:仅保留第一条或100ms内(&lt;100ms)打印10条相似日志(去除字后完全相同的两条日志认为是“相似”，包含第10条均需要被抑制)，即:仅保留前9条。日志抑制的理解:被抑制的日志，不记录到日志文件中</p><p><strong>解答要求</strong></p><p>时间限制:C/C++100ms,其他语言: 200ms</p><p>内存限制:C/C++32MB其他语言:64MB</p><p><strong>输入</strong></p><p>本用例的日志条数(最大不超过1000条) 时间截:日志打印内容</p><p><strong>约束</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、时间戳单位是ms，用32位无符号+进制整数表示
2、用例保证后一条日志时间戳不小于前一条;
3、一条日志打打印只占一行，一条日志内容不超过1024 Bytes;
4、用例保证1s内(&lt;1s)，最多100条日志
5、数字均为正整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><p>时间戳:日志打印内容 输出需要除去被抑制的日志</p><p><strong>样例1</strong></p><p><strong>输入</strong>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4
123:This is a log
123 This is a log
136This is a new log   
138 This is a new log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>123 This is a log
136.This is a new log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释</strong>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>第二条”123 This is alog”、以及”138 This is a new log”被抑制，抑制廉因为满足”相同日志“抑制规则
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>比较麻烦的模拟题。将<strong>相同</strong>和<strong>相似</strong>的日志进行分组，判断是否出现题目所说的抑制条件即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict
<span class="token keyword">import</span> re

n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
records <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
same <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
like <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
vst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    lines <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
    time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    text <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    same<span class="token punctuation">[</span>text<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>time<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    like<span class="token punctuation">[</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;\\d&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>time<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    records<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>time<span class="token punctuation">,</span> text<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> d <span class="token keyword">in</span> same<span class="token punctuation">:</span>
    record <span class="token operator">=</span> same<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token comment"># time index</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span>rec <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">:</span>
        time<span class="token punctuation">,</span> index <span class="token operator">=</span> rec
        <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span> <span class="token keyword">and</span> record<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> time <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span> vst<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>

<span class="token keyword">for</span> d <span class="token keyword">in</span> like<span class="token punctuation">:</span>
    record <span class="token operator">=</span> like<span class="token punctuation">[</span>d<span class="token punctuation">]</span>  <span class="token comment"># time index</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> rec <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">:</span>
        time<span class="token punctuation">,</span> index <span class="token operator">=</span> rec
        <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span> <span class="token keyword">and</span> record<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> time <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span> vst<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>

<span class="token keyword">for</span> i<span class="token punctuation">,</span> record <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> vst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> record<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="网络升级改造" tabindex="-1"><a class="header-anchor" href="#网络升级改造" aria-hidden="true">#</a> 网络升级改造</h2><p>由于软件技术的提升，原有部署网络中某些节点可以撤掉，这样可以简化网络节省维护成本。但是要求撤掉网络节点时，不能同时撤掉原来两个直接相互连接的节点。输入的网络是一个满二叉树结构，每个网络节点上标注一个数值，表示该节点的每年维护成本费用。给定每个输入网络，按照要求撤掉某些节点后，求出能够节省的最大的维护成 解答要求 时间限制:C/C++2000ms,其他语言:4000ms 内存限制:C/C++256MB其他语言:512MB</p><p><strong>输入</strong></p><p>第一行:一个正整数N，表示后面有N个数值。1&lt;=N&lt;= 10000 第二行:N个非负整数，表示网络节点每年的维护成本，按照满二又树的”广度优先遍历序号”给出。0表示不存在该关联节点，0只会存在于叶子节点上。每个数字的取值范围为[0.1000]</p><p><strong>示例:</strong></p><p><strong>输入</strong></p><p>第一行输入:7，表示后面有7个数字。</p><p>第二行输入:5 3 5 0 6 0 1，表示”表示网络节点每年的维护成本，按照满二叉树的“广度优先遍历序号”给出。0表示不存在该关联节点”</p><p><strong>输出</strong></p><p>能够节省的最大的维护成本。</p><p><strong>样例1</strong></p><p><strong>输入</strong>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>7
5 3 5 0 6 0 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>解释</strong>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>第一行输入:7，表示后面有7个数值
第二行输入:5 3 5 0 6 0 1，表示“表示网络节点每年的维护成本，按照满二又树的度优先遍历序号”给出。
输出：12，能够节省的最大维护成本：5+6+1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例2</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>7
2 7 8 2 4 9 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>19
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>每个节点有两种选择，<strong>选和不选</strong></p><p>直接做dp即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

dp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> node <span class="token operator">&gt;=</span> n<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">if</span> node <span class="token keyword">in</span> dp<span class="token punctuation">:</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
    <span class="token comment"># 选</span>
    cur <span class="token operator">=</span> dfs<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
    <span class="token comment"># 不选</span>
    cur <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> dfs<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    dp<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> cur
    <span class="token keyword">return</span> cur

<span class="token keyword">print</span><span class="token punctuation">(</span>dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,75),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","hw20230524.html.vue"]]);export{r as default};
