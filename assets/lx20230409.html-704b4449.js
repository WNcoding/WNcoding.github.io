import{_ as n,o as s,c as a,a as t}from"./app-d0f06d78.js";const p={},e=t(`<p>**前言：**看惯了互联网大厂的笔试题，今天看两道联想的题目放松放松~</p><h2 id="库存管理系统" tabindex="-1"><a class="header-anchor" href="#库存管理系统" aria-hidden="true">#</a> 库存管理系统</h2><p>某电商公司有n种商品在售，他们有一套库存管理系统。在这套系统中，每一种商品都有一个独立的库存。当他们接收到一个订单时，会与库存管理系统中的库存数量进行比较，如果库存满足订单，则会减少对应库存，并返回一个字符串”item #x: Success!”，反之库存不会变化,并返回另—个字符串&quot;item #x: Sorry!&quot;。</p><p>现有一个订单序列,请你按顺序处理。</p><p><strong>输入描述</strong></p><p>输入第一行是两个正整数n,m分别表示商品种类和订单序列长度。(1&lt;=n, m&lt;=500)</p><p>输入第二行包含n个整数,分别代表第i种商品的库存xi。(0&lt;=xi=500)</p><p>接下来有m行,每行两个正整数k、v,表示订单需要第k种商品v件。</p><p>(1&lt;=k&lt;=n,1&lt;=v&lt;=1000)</p><p><strong>输出描述</strong></p><p>对于每一个订单,依据提议输出“item #x:Success!&quot;或“item #x: Sorry!&quot; ,x表示商品编号。</p><p><strong>样例输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3 4
2 3 2
1 2
2 4
3 1
1 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>item #1: Success!
item #2: Sorry!
item #3: Success!
item #1: Sorry!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>送分题。</p><p>每次判断当前数量是否足够，打印相应的结果即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n<span class="token punctuation">,</span>m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
    k<span class="token punctuation">,</span>v <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> nums<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> v<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;item #&quot;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: Success!&quot;</span><span class="token punctuation">)</span>
        nums<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> v
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;item #&quot;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: Sorry!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="抢红包" tabindex="-1"><a class="header-anchor" href="#抢红包" aria-hidden="true">#</a> 抢红包</h2><p>抢红包已经不再是逢年过节才会有的活动，有很多人都习惯通过一个红包来测试自己的运气。这一天，阿狸又玩起了抢红包游戏，共有n个人抢红包,第i个人抢到了x_i元。阿狸想对参与抢红包的人进行一次运气排名，按照抢到的金额从大到小进行排序，如果出现两个人抢到的金额是一致的,那么按照参与抢红包的先后顺序排名。如A和C抢到的金额相同，但A比C先参与抢红包,则A排序在C之前。</p><p><strong>输入描述</strong></p><p>输入第一行是一个正整数n，表示参与抢红包的人数。(1&lt;=n&lt;=300)</p><p>接下来有n行，每行包含一个由小写字母构成的字符串s和一个正整数xi,分别表示抢红包的id和抢到的金额。这n行的输入顺序即参与抢红包的顺序。(1&lt;=S&lt;=10)(不保证id不重复,部分数据不含相同x_i)</p><p><strong>输出描述</strong></p><p>输出包含n行,每行一个字符串，每个字符串对应输入中的一个id,按照金额从大到小输出。</p><p><strong>示例</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4
a 1
b 2
c 2
d 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>b
c
a
d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>排序题。按照规则排序即可。</p><p>首先按照金额排序，其次按照时间进行排序，对于每一个抢红包的例子，可以加入一个值表示当前红包的顺序。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
hb <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">id</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
    amount <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span>
    hb<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>

hb<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> h <span class="token keyword">in</span> hb<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),o=[e];function i(c,l){return s(),a("div",null,o)}const r=n(p,[["render",i],["__file","lx20230409.html.vue"]]);export{r as default};
