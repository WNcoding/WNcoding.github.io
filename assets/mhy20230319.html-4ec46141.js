import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<div class="custom-container tip"><p class="custom-container-title">前言</p><p>本场难度比较低，但是只拿到了最后一题，供大家参考。</p></div><h2 id="_1-互为倍数的子集" tabindex="-1"><a class="header-anchor" href="#_1-互为倍数的子集" aria-hidden="true">#</a> 1.互为倍数的子集</h2><p>米小游拿到了一个集合（集合元素互不相等）。她想知道，该集合有多少元素数量大于1的子集，满足子集内的元素两两之间互为倍数关系？结果可能很大，请对10^9+7取模。</p><p><strong>输入描述</strong></p><p>第一行输入一个正整数n，代表集合大小。</p><p>第二行输入n个正整数ai，代表集合元素。</p><p>1≤n≤10^5</p><p>1≤ai≤10^6</p><p><strong>输出描述</strong></p><p>一个整数，代表满足题意的子集的数量。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5
1 2 3 4 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>最朴素的思路可以是 dp[i]表示以第i个元素结尾的子集的数量，因此不难写出dp转移方程式： dp[i] = 1 + sum(dp[j])，其中，nums[i]是nums[j]的倍数。但是这样的操作我们需要枚举j，也就是时间复杂度会去到O(n^2)，对于10w的数据规模是无法通过的。</p><p>优化思路如下：我们要枚举的j的特点是必须满足nums[i]是nums[j]的倍数，换句话说，nums[j]是nums[i]的一个因子。因此我们可以更换dp思路，把dp[i]定义为 最大倍数为i的子集的数量。那么我们枚举的时候只需要枚举nums[i]的因子就可以了，枚举因子的复杂度是O(√n)，因此复杂度可以优化为O(n√n)。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>

dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token function">find_factors</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    factors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    i <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> x<span class="token punctuation">:</span>
        <span class="token keyword">if</span> x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            factors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">if</span> i <span class="token operator">!=</span> x <span class="token operator">//</span> i<span class="token punctuation">:</span>
                factors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x <span class="token operator">//</span> i<span class="token punctuation">)</span>
        i <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> factors

dp<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    factors <span class="token operator">=</span> find_factors<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> fac <span class="token keyword">in</span> factors<span class="token punctuation">:</span>
        <span class="token keyword">if</span> fac <span class="token operator">!=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
            dp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>fac<span class="token punctuation">]</span>
    dp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span> <span class="token operator">-</span> n<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","mhy20230319.html.vue"]]);export{r as default};
