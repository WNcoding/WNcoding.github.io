import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<div class="custom-container tip"><p class="custom-container-title">前言</p><p>本场笔试为核心代码模式，不需要输入输出。</p><p>大家做笔试的时候千万不要all in 第一题，第一题不一定是最简单的。</p></div><h2 id="_1-二叉树赋值" tabindex="-1"><a class="header-anchor" href="#_1-二叉树赋值" aria-hidden="true">#</a> 1.二叉树赋值</h2><p>小红拿到了一个二叉树，二叉树共有n个节点。小红希望你将所有节点赋值为1到n的正整数，且没有两个节点的值相等。需要满足:奇数层的权值和与偶数层的权值和之差的绝对值不超过1。</p><p>如果有多种赋值方案，请返回任意—种方案。如果无解，请返回空树。数据范围: 1&lt;n ≤10^5。给定的二叉树节点初始权值默认为-1。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><p>{-1,-1,-1}</p><p><strong>输出</strong></p><p>{3,1,2}</p><p><strong>示例2</strong></p><p><strong>输入</strong></p><p>{-1,-1,#,-1,-1}</p><p><strong>输出</strong></p><p>{}</p><p><strong>示例3</strong></p><p><strong>输入</strong></p><p>{-1,-1,-1,#,-1,-1}</p><p><strong>输出</strong></p><p>{1,3,4,#,2,5}</p><p><strong>思路与代码</strong></p><p>我们试着将问题转换成：将一个数组（n的排列）分成2个子集，使得这两个子集的和差值最多不会超过1，找到符合要求的一个分配方案即可。</p><p>首先我们讨论几个问题：</p><ol><li>Q：两个子集的和不超过1，有什么规律吗？ A：<strong>如果数组总和为偶数，那么这两个子集的和只能相等；否则，差值为1。</strong></li><li>Q：问题能否转换成，<strong>找到一个和为总和一半(一半 + 1)的子集？</strong>，如此依赖就是一个简单的01背包问题了。 A：不可以，由于n最大值是10w，因此和非常大，动态规划来做必然会超时。</li></ol><p>因此，我们需要利用到<strong>排列</strong>这个特性去做一些技巧。</p><p>首先我们可以找到奇数层和偶数层的所有节点，各自存放于数组中，找到长度较小的一个数组，我们要做的就是使用 n的排列中的一些数字填进 这个数组，使得和为总和一半。</p><p>假设n=10， 较小的数组长度为4，此时我们要找到就是一个长度为4的子数组，和为27。不难发现，这个数组填值后，最小值为[1,2,3,4] = 10, 最大值为[7,8,9,10]=34，因此我们不难得到一个结论，只要是和为[10,34]这个区间内，均可找到满足条件的情况（因为是排列，所以数字都是线性递增的）。</p><p>那枚举的方案就是：</p><ol><li>我们先确定数组为[7,8,9,10]，当前和为34，目标值是27</li><li>此时，当前和和目标值的差值是7，我们只需要将第一个元素更换为1，第二个元素更换为7，即可得到[1,7,9,10]，当前和为27，目标值为27。</li></ol><p>一般化这种思路就是，将当前选取的数组的最小的元素替换为尽可能小的，同理对第二个元素进行同样的操作，直到替换的差值满足 <strong>当前和-目标和</strong>。</p><p>讨论这里，也就是模拟了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> itertools <span class="token keyword">import</span> accumulate


<span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token comment">#</span>
<span class="token comment"># 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span>
<span class="token comment">#</span>
<span class="token comment">#</span>
<span class="token comment"># @param root TreeNode类</span>
<span class="token comment"># @return TreeNode类</span>
<span class="token comment">#</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>
        odd<span class="token punctuation">,</span> even <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#分别表示 奇数的节点和 偶数的节点</span>

        <span class="token keyword">def</span> <span class="token function">cnts</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>
            <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                even<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                odd<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
            cnts<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            cnts<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

        size <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">)</span>
        tree1<span class="token punctuation">,</span> tree2 <span class="token operator">=</span> even <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span> <span class="token keyword">else</span> odd <span class="token comment"># 短的 和长的</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span>
        nums <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># n的排列</span>

        pres <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>accumulate<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> initial<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 前缀和</span>

        target <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token comment"># 判断是否可行</span>
        <span class="token keyword">if</span> pres<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target <span class="token operator">&lt;=</span> pres<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> pres<span class="token punctuation">[</span>n<span class="token operator">-</span>size<span class="token punctuation">]</span><span class="token punctuation">:</span>
            vst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            cur <span class="token operator">=</span> pres<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> pres<span class="token punctuation">[</span>n<span class="token operator">-</span>size<span class="token punctuation">]</span>
            maxf <span class="token operator">=</span> n<span class="token operator">-</span>size
            x <span class="token operator">=</span> cur <span class="token operator">//</span> maxf
            y <span class="token operator">=</span> cur <span class="token operator">-</span> x<span class="token operator">*</span>maxf

            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
                tree1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>
                vst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

            <span class="token keyword">if</span> y<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>
                tree1<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token operator">-</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>x<span class="token operator">-</span>y
                vst<span class="token punctuation">[</span>n<span class="token operator">-</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>x<span class="token operator">-</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

                pos <span class="token operator">=</span> n
                cnt <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token keyword">while</span> cnt <span class="token operator">&lt;</span> size <span class="token operator">-</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                    tree1<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> pos
                    pos <span class="token operator">-=</span> <span class="token number">1</span>
                    cnt <span class="token operator">+=</span> <span class="token number">1</span>
                    vst<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

            <span class="token keyword">else</span><span class="token punctuation">:</span>
                pos <span class="token operator">=</span> n
                cnt <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token keyword">while</span> cnt <span class="token operator">&lt;</span> size <span class="token operator">-</span> x<span class="token punctuation">:</span>
                    tree1<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> pos
                    pos <span class="token operator">-=</span> <span class="token number">1</span>
                    cnt <span class="token operator">+=</span> <span class="token number">1</span>
                    vst<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> vst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    tree2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i

            <span class="token keyword">return</span> root


        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-小红的字符串切分" tabindex="-1"><a class="header-anchor" href="#_2-小红的字符串切分" aria-hidden="true">#</a> 2.小红的字符串切分</h2><p>小红定义一个字符串的权值为:字符串长度乘以字符串的字母种类数量。例如,&quot;abacb&quot;的价值为5*3=15。</p><p>小红拿到了一个字符串，她准备将该字符串切分成k个子串(将这k个子串按顺序拼在一起即可得到原串）。小红希望切分后这k个子串的最大权值尽可能小。你能帮帮小红吗?你不需要给出一个方案，只需要返回最终这k个子串的最大权值即可。</p><p>字符串仅包含小写字母，且长度不超过500000。k为不超过字符串长度的正整数。</p><p><strong>示例</strong></p><p><strong>输入</strong></p><p>&quot;ababbbb&quot;,2</p><p><strong>输出</strong></p><p>6</p><p><strong>思路与代码</strong></p><p>整体的思路是：二分答案。</p><p>如果，切分后的子串的最大权值是x，那么说明 不大于x+1 肯定也是一种合法的方案，因此我们只需要考虑比x小的即可。同理，切分后的子串的最大权值 小于x是不可行的，那么说明 小于x-1 肯定也不是一种合法的方案，因此我们只需要考虑比x大的即可。因此整体的切分的特性是具有 <strong>二段性</strong>的，因此直接对答案二分即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#</span>
<span class="token comment"># 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span>
<span class="token comment">#</span>
<span class="token comment"># </span>
<span class="token comment"># @param str string字符串 </span>
<span class="token comment"># @param k int整型 </span>
<span class="token comment"># @return int整型</span>
<span class="token comment">#</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span>self <span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token comment"># write code here</span>
        
        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
            cnt <span class="token operator">=</span> <span class="token number">1</span>
            st<span class="token punctuation">,</span> ed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
            occ <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">while</span> ed <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">[</span>ed<span class="token punctuation">]</span> <span class="token keyword">in</span> occ<span class="token punctuation">:</span> 
                    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>occ<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ed <span class="token operator">-</span> st <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">:</span>
                        occ<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token punctuation">)</span>
                        ed<span class="token operator">+=</span> <span class="token number">1</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        st <span class="token operator">=</span> ed
                        occ<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
                        cnt <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>occ<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ed <span class="token operator">-</span> st <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">:</span>
                        occ<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token punctuation">)</span>
                        ed <span class="token operator">+=</span> <span class="token number">1</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        st <span class="token operator">=</span> ed
                        occ<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
                        cnt <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">return</span> cnt <span class="token operator">&lt;=</span> k
                
        
        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">26</span> <span class="token operator">*</span> <span class="token number">500000</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            <span class="token keyword">if</span> check<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span> r <span class="token operator">=</span> mid
            <span class="token keyword">else</span><span class="token punctuation">:</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> r
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-小红的字符串" tabindex="-1"><a class="header-anchor" href="#_3-小红的字符串" aria-hidden="true">#</a> 3.小红的字符串</h2><p>小红拿到了一个仅由大写字母和小写字母组成的字符串。她想知道，在不考虑大小写的情况下，有多少对相邻的字母相等?</p><p>字符串长度不超过2×10^5。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><p>&quot;aABbbC&quot;</p><p><strong>输出</strong></p><p>3</p><p><strong>思路与代码</strong></p><p>打卡题放在最后一题，出题人的心思真是细腻啊。。。。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">/**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param str string字符串 
     * @return int整型
     */</span>
    <span class="token keyword">int</span> <span class="token function">getCnt</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// write code here</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;A&#39;</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","txyy20230323.html.vue"]]);export{r as default};
