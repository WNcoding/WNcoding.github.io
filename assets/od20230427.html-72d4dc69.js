import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<h1 id="华为od-0427笔试题" tabindex="-1"><a class="header-anchor" href="#华为od-0427笔试题" aria-hidden="true">#</a> 华为OD 0427笔试题</h1><h2 id="考勤记录" tabindex="-1"><a class="header-anchor" href="#考勤记录" aria-hidden="true">#</a> 考勤记录</h2><p>考勤记录是分析和考核职工工作时间利用情况的原始依据，也是计算职工工资的原始依据，为了正确地计算职工工资和监督工资基金使用情况，公司决定对员工的手机打卡记录进行异常排查。如果出现以下两种情况，则认为打卡异常</p><p>1、实际设备号与注册设备号不一样</p><p>2、或者，同一个员工的两个打卡记录的时间小于60分钟并且打卡距离超过5km。给定打卡记录的字符串数组clockRecords (每个打卡记录组成为:工号;时间 (分钟) ;打卡距离(km) ;实际设备号;注册设备号) ，返回其中异常的打卡记录 (按输入顺序输出)。</p><p><strong>输入描述</strong></p><p>第一行输入为N，表示打卡记录数; 之后的N行为打卡记录，每一行为一条打卡记录.例如: 2 100000,10,1,ABCD,ABCD;100000,50,10,ABCD,ABCD</p><p><strong>输出描述</strong></p><p>输出为异常的打卡记录，例如:</p><p>100000,10,1ABCD,ABCD;100000,50,10ABCD,ABCD</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
100000,10,1,ABCD,ABCD;100000,50,10ABCD,ABCD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>100000,10,1,ABCD,ABCD;100000,50,10,ABCD,ABCD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明 第一条记录是异常的，因为第二条记录与它的间隔不超过60分钟但是打卡距离超过了5km,</p><p><strong>示例2</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
100000,10.1.ABCDABCD;100000,80,10,ABCE,ABCD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>100000,80,10,ABCE,ABCD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong> 第二条记录的注册设备号与打卡设备号不-致，所以是异常记录</p><p>输出 null 说明 无异常打卡记录，所以返回null</p><p><strong>备注</strong></p><p>1、clockRecords长度&lt;=1000; 2、clockRecordsi格式: {id},{time},{distance},{actualDeviceNumber},{registeredDeviceNumber} 3、id由6位数字组成;</p><p>4、time由整数组成，范围为0~1000;</p><p>5、distance由整数组成，范围为0~100;</p><p>6、actualDeviceNumber与registeredDeviceNumber由 四位大写字母组成。</p><p><strong>思路与代码</strong></p><p>模拟题。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>N <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
records <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>
    lines <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
    <span class="token builtin">id</span><span class="token punctuation">,</span> time<span class="token punctuation">,</span> dis<span class="token punctuation">,</span> devid<span class="token punctuation">,</span> reg_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lines<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lines<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token builtin">id</span> <span class="token keyword">not</span> <span class="token keyword">in</span> records<span class="token punctuation">:</span> records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>time<span class="token punctuation">,</span> dis<span class="token punctuation">,</span> devid<span class="token punctuation">,</span> reg_id<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>

eroors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> records<span class="token punctuation">:</span>
    records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            eroors<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span> <span class="token operator">+</span> records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token keyword">and</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
                    eroors<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span> <span class="token operator">+</span> records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    eroors<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span> <span class="token operator">+</span> records<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    i<span class="token operator">+=</span><span class="token number">1</span>

<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>eroors<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">else</span><span class="token punctuation">:</span>
    eroors<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
    <span class="token keyword">for</span> eroor <span class="token keyword">in</span> eroors<span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res <span class="token operator">=</span> res <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>eroor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span>
        res <span class="token operator">=</span> res <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>eroor<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;;&quot;</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><p>给定2个字符串s1和s2和正整数k，其中s1长度为n1，s2长度为n2，在s2中选一个子串，满足: 该子串长度为n1+k 该子串包含S1中全部字母 该子串每个字母的出现次数不小于s1中对应的字母</p><p>我们称s2以长度k几余覆盖s1。给定s1、s2和k，求最左侧的s2以长度k几余覆盖s1的子串的首个元素的下标，如果没有返回-1 举例: s1=ab s2=aabcd</p><p>k=1 则则子串aab和abc均满足此条件，由于aab在abc的左侧，aab的第一个元素下标为0，因此输出0 输入描述 输入三行，第一行为s1第二行为s2，第三行为ks1和s2只包含小写字母 输出描述 最左侧的s2以长度k冗余覆盖s1的子串首个元素的下标，如果没有返回-1</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ab aabcd 1 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输出</strong></p><p>0</p><p><strong>说明</strong>： 子串aab和abc满足要求，由于aab在abc的左侧，因此输出aab的下下标:0</p><p><strong>示例2</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>abc dfs 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><p>s2无法覆盖s1，输出-1</p><p><strong>备注</strong></p><p>0 &lt;=len(s1)&lt;= 1000000 0 &lt;=len(s2) &lt;= 20000000 0&lt;=k&lt;=1000</p><p><strong>思路与代码</strong></p><p>一个固定长度的滑动窗口。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># lines = input().split(&quot; &quot;)</span>
<span class="token comment"># s1, s2, k = lines[0], lines[1], int(lines[2])</span>
s1 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s2 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter

cntter <span class="token operator">=</span> Counter<span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span>
s1_cnter <span class="token operator">=</span> Counter<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> s <span class="token keyword">in</span> s1_cnter<span class="token punctuation">:</span>
        <span class="token keyword">if</span> s <span class="token keyword">not</span> <span class="token keyword">in</span> cntter <span class="token keyword">or</span> cntter<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">&lt;</span> s1_cnter<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>

<span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> check<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>
    l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">+</span> k
    <span class="token keyword">while</span> r <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> check<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> l
        cntter<span class="token punctuation">[</span>s2<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> s2<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> cntter<span class="token punctuation">:</span> cntter<span class="token punctuation">[</span>s2<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        cntter<span class="token punctuation">[</span>s2<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        l <span class="token operator">+=</span> <span class="token number">1</span>
        r <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span> check<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> l

ans <span class="token operator">=</span> solv<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> ans <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="产品组合" tabindex="-1"><a class="header-anchor" href="#产品组合" aria-hidden="true">#</a> 产品组合</h2><p>某公司目前推出了A开发者套件、AI速卡、AI加速模块、AI服务器、智能边缘多种硬件产品，每种产品包含若干个型号。现某合作厂商要采购金额为amount元的硬件产品搭建自己的AI基座。假设当前库存有N种产品，每种产品的库存量充足，给定每种产品的价格，记为price (不存在价格相同的产品型号)。请为合作厂商列出所有可能的产品组合。</p><p><strong>输入描述</strong></p><p>输入包含采购金额amount和产品价格列表price。第一行为amount，第二行为price。</p><p><strong>例如:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>500
[100，200.300，500]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出描述 输出为组合列表。</p><p>例如:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[[500],[200,300],[100,200,200],[106,100,300],[100,100,100,200], [100，100,100,100,100]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>500
[100，200,300,500,500]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[[100,100,100,100,100],[100,100,100,200][100，100,300],[100, 200,200],[200,300],[500][500]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例2</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>100
[100]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[[100]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>备注 1.对于给定输入，产品组合少于150种。输出的组合为个数组，数组的每个元素也是一个数组，表示一种组合方案。如果给定产品无法组合金额为amount元的方案，那么返回空列表。 2.两种组合方案，只要存在-一种产品的数量不同，那么 方案认为是不同的。 3.每种产品型号价格不相同 4.1 &lt;=产品类型数量 &lt;= 30 5.100&lt;=产品价格 &lt;= 20000 6.100 &lt;=采购金额 &lt;= 50000</p><p><strong>思路与代码</strong></p><p>简单的回溯枚举即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>amount <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
price <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> path<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> cur <span class="token operator">&gt;=</span> amount <span class="token keyword">or</span> index <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cur <span class="token operator">==</span> amount<span class="token punctuation">:</span> res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    dfs<span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>
    dfs<span class="token punctuation">(</span>index<span class="token punctuation">,</span> path<span class="token operator">+</span><span class="token punctuation">[</span>price<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cur <span class="token operator">+</span> price<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>

dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p>`,77),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","od20230427.html.vue"]]);export{r as default};
