import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<div class="custom-container tip"><p class="custom-container-title">前言</p><p>此套题目难度适中，要尽量争取AK。</p></div><h2 id="百度字符串" tabindex="-1"><a class="header-anchor" href="#百度字符串" aria-hidden="true">#</a> 百度字符串</h2><p>小红拿到了一个字符串,她想知道这个字符串能否通过重新排列组成&quot;Baidu&quot;字符串?</p><p>注:必须大小写完全相同。共有t组询问。</p><p><strong>输入描述</strong></p><p>第一行输入一个正整数t，代表询问次数。</p><p>接下来的t行，每一行输入一个仅包含英文字母的字符串。</p><p>所有字符串的长度之和保证不超过200000。</p><p><strong>输出描述</strong></p><p>成功则输出YES，否则输出NO</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4
Baidu
baidu
Baidu
bbdu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>YES
NO
YES
NO
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>打卡题，使用哈希表模拟即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
baidu <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;u&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> c <span class="token keyword">in</span> baidu<span class="token punctuation">:</span>
            <span class="token keyword">if</span> c <span class="token keyword">not</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

    <span class="token keyword">return</span> <span class="token boolean">False</span>

<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> solv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;YES&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;NO&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="red字符串" tabindex="-1"><a class="header-anchor" href="#red字符串" aria-hidden="true">#</a> RED字符串</h2><p>给定一个整数x，请你构造一个仅由&#39;r&#39;、&#39;e&#39;、d&#39;三种字符组成的字符串，其中回文子串的数量恰好为x。字符串的长度不得超过10^5。</p><p><strong>输入描述</strong></p><p>一个正整数x。</p><p>1&lt;=x&lt;=10^9</p><p><strong>输出描述</strong></p><p>输出一个仅由&#39;r&#39;,&#39;e&#39;,&#39;d&#39; 三种字符组成的字符串。若有多解输出任意即可。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><p>3</p><p><strong>输出</strong></p><p>red</p><p><strong>思路与代码</strong></p><p>观察可知，按照rrrrr....eeee......ddd....rrrr.....eee...ddd....的形式构建字符串，这样就可以**使得回文串只能在相同字符组成的子串中构建，**这样我们就只需要关注，长度为x的相同字符构成的字符串的回文子串的长度即可。</p><p>可以使用简单的打表统计相同字符的字符串的回文子串的数量【也可以写程序算，我直接手推，这样比较写起来比较快一些】。</p><p>f(i)表示长度为i的相同字符的字符串的回文子串的数量</p><p>f(0)=1, f(10)=55,f(100)=5050,f(1000)=500500,f(10000)=50005000.....</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token builtin">map</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">:</span><span class="token number">5050</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">:</span><span class="token number">500500</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">:</span><span class="token number">50005000</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">:</span> <span class="token number">5000050000</span><span class="token punctuation">,</span><span class="token number">1000000</span><span class="token punctuation">:</span><span class="token number">500000500000</span><span class="token punctuation">,</span> <span class="token number">10000000</span><span class="token punctuation">:</span><span class="token number">50000005000000</span><span class="token punctuation">}</span>

index_map <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>

str_map <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>
str_index <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>index_map<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">map</span><span class="token punctuation">[</span>index_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">:</span>
            x <span class="token operator">-=</span> <span class="token builtin">map</span><span class="token punctuation">[</span>index_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
            tmp <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> tmp <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>tmp <span class="token punctuation">,</span>str_map<span class="token punctuation">[</span>str_index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>res <span class="token punctuation">,</span> tmp<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    str_index <span class="token operator">+=</span> <span class="token number">1</span>
    str_index <span class="token operator">%=</span> <span class="token number">3</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="同色连通块" tabindex="-1"><a class="header-anchor" href="#同色连通块" aria-hidden="true">#</a> 同色连通块</h2><p>小红拿到了一棵树，每个节点被染成了红色或者蓝色。小红定义每条边的权值为:删除这条边时，形成的两个子树的同色连通块数量之差的绝对值。</p><p>小红想知道，所有边的权值之和是多少?</p><p><strong>输入描述</strong></p><p>第一行输入一个正整数n,代表节点的数量。</p><p>第二哈输入一个长度为n且仅由&#39;R&#39;和&#39;B&#39;两种字符组成的字符串。第;个字符为&#39;R&#39;代表号节点被染成红色，为&#39;B&#39;则被染成蓝色。</p><p>接下来的n-1行,每行输入两个正整数u和v,代表节点u和节点U有一条边相连。</p><p>1&lt;=n&lt;=200000</p><p><strong>输出描述</strong></p><p>一个正整数,代表所有节点的权值之和。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4
BBRR
1 2
3 2
4 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>我们首先观察一个规律，假设我们选择一条边(a,b)进行切割，连通块的数量会发生什么变化呢？</p><ol><li>如果a和b是不同色的，那么此时<strong>两个子树的连通块的数量之和 等于 原树的连通块数量</strong></li><li>如果a和b是同色的，那么此时<strong>两个子树的连通块的数量之和 等于 原树的连通块数量+1</strong></li></ol><p>因此整体的思路就是：</p><ol><li>统计原树连通块的数量</li><li>从节点1出发（任意节点都可以），遍历所有的子树，向上返回以当前节点为根的子树的同色连通块的数量。</li><li>如果当前节点颜色与上层节点颜色相同，则说明切割的是同一个同色连通块，此时另外一个树的同色连通块数量other=all - cnt + 1。否则为 other = all - cnt。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict

n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
colors <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
graph <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    graph<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

res <span class="token operator">=</span> <span class="token number">0</span>
allUnion <span class="token operator">=</span> <span class="token number">0</span>

<span class="token comment"># 以node为根的子树 同色连通块的数量</span>
<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> pre<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token builtin">int</span><span class="token punctuation">:</span>
    cnt <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> <span class="token builtin">next</span> <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">next</span> <span class="token operator">!=</span> pre<span class="token punctuation">:</span>
           cnt <span class="token operator">+=</span> dfs<span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span>
           <span class="token keyword">if</span> colors<span class="token punctuation">[</span>node<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> colors<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
               cnt <span class="token operator">-=</span> <span class="token number">1</span>

    other <span class="token operator">=</span> allUnion <span class="token operator">-</span> cnt
    <span class="token keyword">if</span> pre <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">and</span> colors<span class="token punctuation">[</span>node<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> colors<span class="token punctuation">[</span>pre<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        other <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">global</span> res
    <span class="token keyword">if</span> pre <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>other <span class="token operator">-</span> cnt<span class="token punctuation">)</span>

    <span class="token keyword">return</span> cnt

allUnion <span class="token operator">=</span> dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 统计原树所有同色连通块的数量</span>
res <span class="token operator">=</span> <span class="token number">0</span>

dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","bd20230313.html.vue"]]);export{r as default};
