import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},o=p(`<h2 id="密码学" tabindex="-1"><a class="header-anchor" href="#密码学" aria-hidden="true">#</a> 密码学</h2><p><strong>题目描述：</strong></p><p>小明学会了一种加密方式。他定义suc(x)为x在字母表中的后继，例如a的后继为b，b的后继为c… （即按字母表的顺序后一个）。特别的，z的后继为a。对于一个原字符串S，将其中每个字母x都替换成其三重后继，即suc(suc(suc(x)))的字母，即完成了加密。</p><p>例如，abc加密后变成def （suc(suc(suc(a)))=d suc(suc(suc(b)))=e suc(suc(suc(c)))=f）</p><p>现在小明知道一个加密后的字符串S&#39;，想请你找出他的原串S</p><p><strong>输入描述</strong></p><p>第一行一个正整数N，表示加密后的字符串长度</p><p>接下来一行是长度为N的字符串S&#39;，含义如上。保证仅包含小写英文字母。</p><p>对于所有数据：1≤N≤50000</p><p><strong>输出描述</strong></p><p>一行，一个长度为N的字符串S，表示答案。</p><p><strong>样例输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3 
def
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>abc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>说的挺复杂，实际特别简单，就是模拟就完了。每一个字符按照ASCI往前推3位即可。</p><p><strong>Python</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>N <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>C++</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> N<span class="token punctuation">;</span>
string s<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cin <span class="token operator">&gt;&gt;</span> N<span class="token punctuation">;</span>
  cin <span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> cur <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> nx <span class="token operator">=</span> <span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nx <span class="token operator">+</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="k排序" tabindex="-1"><a class="header-anchor" href="#k排序" aria-hidden="true">#</a> K排序</h2><p><strong>题目描述：</strong></p><p>在算法中，有各种各样的排序算法，例如归并排序，冒泡排序，快速排序等等。本题中，我们会使用一种新的排序算法：K排序。</p><p>K排序算法描述如下：首先，算法需要按照某种规则选择该数列上至多K个位置，将其对应的数抽出来，其他的数都往左对齐，之后这K个数排好序之后依次放在原数列末尾。以上过程算作一次操作。</p><p>例如，对于数列[1,3,5,4,2]，当K=2时可以选择数字5和4，之后数列变成[1,3,2,4,5]。</p><p>你的任务是：对于给定的数列，你需要计算出最少需要多少次上述操作，使得整个数列从小到大排好序？</p><p><strong>输入描述</strong></p><p>第一行一个正整数T，表示有T组数据。</p><p>对于每一组数据，第一行输入两个正整数n,k；第二行输入n个数a1,a2,....,an。该序列是一个1~n的排列。</p><p>对于所有数据：1≤k≤n≤10^5,1≤ai≤n, ai≠aj,1≤T≤5</p><p><strong>输出描述</strong></p><p>对于每一组数据，输出一行一个整数，表示答案。</p><p><strong>样例输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2 
5 1 
1 2 3 4 5 
5 2 
1 3 5 4 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0 
2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>提示</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>样例解释
第一组数据，原数列已经排好序，则无需进行任何操作；
第二组数据，操作如下：
[1,3,5,4,2] -&gt; [1,5,4,2,3]
[1,5,4,2,3] -&gt; [1,2,3,4,5]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>思维题，需要多分析。</p><p>题目要求每一次从子数组中拿出k个数字放到数组后面，因此我们需要找出可以保留多少序列是不需要挪动的，而原题目给定的数组是一个排列，因此，我们可以找出原数组中，以1开始的公差为1最长等差数列（1,2,3,4,....），这些子序列是不可不需要改变位置的，剩余的元素均需要进行挪动。挪动的规则是k个一组进行挪动，注意要处理不整除的情况。</p><p><strong>Python</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>T <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

    p <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> a <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> a <span class="token operator">==</span> p<span class="token punctuation">:</span>
            p<span class="token operator">+=</span><span class="token number">1</span>

    res <span class="token operator">=</span> n<span class="token operator">-</span>p<span class="token operator">+</span><span class="token number">1</span>
    <span class="token keyword">if</span> p<span class="token operator">%</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token operator">//</span>k<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token operator">//</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>
    solv<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>C++</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> T<span class="token punctuation">;</span>
  cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> target<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> n <span class="token operator">-</span> target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">/</span> k<span class="token punctuation">;</span>
    <span class="token keyword">else</span> res <span class="token operator">=</span> res<span class="token operator">/</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="涂色" tabindex="-1"><a class="header-anchor" href="#涂色" aria-hidden="true">#</a> 涂色</h2><p><strong>题目描述：</strong></p><p>给出一个数组。你需要求出按顺序对其进行一系列区间操作后最终所得的数组。</p><p>操作有三种：</p><ol><li><p>将下标在L到R之间的元素全部或上X。</p></li><li><p>将下标在L到R之间的元素全部与上X。</p></li><li><p>将下标在L到R之间的元素全部设为X。</p></li></ol><p><strong>输入描述</strong></p><p>第一行有一个正整数N(1&lt;=N&lt;=100000)，代表数组的长度。</p><p>第二行有N个非负整数，范围在0到2^20-1之间，代表数组中的元素。</p><p>第三行有一个正整数M(1&lt;=M&lt;=100000)，代表操作次数。</p><p>第四行有M个正整数，代表M次操作中的区间左端点L。</p><p>第五行有M个正整数，代表M次操作中的区间右端点R。</p><p>第六行是一个长度为M的字符串，<code>|</code>代表操作1，<code>&amp;</code>代表操作2，<code>=</code>代表操作3。</p><p>第七行有M个正整数，代表M次操作中的参数X。</p><p><strong>输出描述</strong></p><p>在一行中输出N个数，代表所有操作按顺序完成后最终所得的数组。</p><p><strong>样例输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4 
5 4 7 4 
4 
1 2 3 2 
4 3 4 2 
=|&amp;= 
8 3 6 2


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>样例输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>8 2 2 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>比较麻烦的一道题目。</p><p><strong>多次区间修改</strong>，不难想到线段树，但是这个题不仅需要叠加的操作，还需要有异或、与这样的操作，因此线段树的模板需要一定的改造。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SegmentTree</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>n <span class="token operator">=</span> n
        self<span class="token punctuation">.</span>tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>build<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">build</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> v<span class="token punctuation">,</span> tl<span class="token punctuation">,</span> tr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> tl <span class="token operator">==</span> tr<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>tl<span class="token punctuation">]</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            tm <span class="token operator">=</span> <span class="token punctuation">(</span>tl <span class="token operator">+</span> tr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            self<span class="token punctuation">.</span>build<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tl<span class="token punctuation">,</span> tm<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>build<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> tm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tr<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> v<span class="token punctuation">,</span> tl<span class="token punctuation">,</span> tr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> l <span class="token operator">&gt;</span> r<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">if</span> tl <span class="token operator">==</span> l <span class="token keyword">and</span> tr <span class="token operator">==</span> r<span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>v<span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>push<span class="token punctuation">(</span>v<span class="token punctuation">,</span> tl<span class="token punctuation">,</span> tr<span class="token punctuation">)</span>
        tm <span class="token operator">=</span> <span class="token punctuation">(</span>tl <span class="token operator">+</span> tr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        left <span class="token operator">=</span> self<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tl<span class="token punctuation">,</span> tm<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> tm<span class="token punctuation">)</span><span class="token punctuation">)</span>
        right <span class="token operator">=</span> self<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> tm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tr<span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> tm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
        <span class="token keyword">return</span> left <span class="token operator">&amp;</span> right

    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> v<span class="token punctuation">,</span> tl<span class="token punctuation">,</span> tr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> l <span class="token operator">&gt;</span> r<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        <span class="token keyword">if</span> l <span class="token operator">==</span> tl <span class="token keyword">and</span> r <span class="token operator">==</span> tr<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>lazy<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
            <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token string">&#39;|&#39;</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> x
            <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span> x
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> x
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>push<span class="token punctuation">(</span>v<span class="token punctuation">,</span> tl<span class="token punctuation">,</span> tr<span class="token punctuation">)</span>
            tm <span class="token operator">=</span> <span class="token punctuation">(</span>tl <span class="token operator">+</span> tr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            <span class="token keyword">if</span> r <span class="token operator">&lt;=</span> tm<span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tl<span class="token punctuation">,</span> tm<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> op<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> l <span class="token operator">&gt;</span> tm<span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> tm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> op<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tl<span class="token punctuation">,</span> tm<span class="token punctuation">,</span> l<span class="token punctuation">,</span> tm<span class="token punctuation">,</span> op<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> tm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tr<span class="token punctuation">,</span> tm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> op<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> v<span class="token punctuation">,</span> tl<span class="token punctuation">,</span> tr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> tl <span class="token operator">&lt;</span> tr <span class="token keyword">and</span> self<span class="token punctuation">.</span>lazy<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            op<span class="token punctuation">,</span> x <span class="token operator">=</span> self<span class="token punctuation">.</span>lazy<span class="token punctuation">[</span>v<span class="token punctuation">]</span>
            <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token string">&#39;|&#39;</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> x
                self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> x
                self<span class="token punctuation">.</span>lazy<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>lazy<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span> x
                self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span> x
                self<span class="token punctuation">.</span>lazy<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>lazy<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x
                self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> x
                self<span class="token punctuation">.</span>lazy<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>lazy<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>lazy<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>

N <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
M <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
lefts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
rights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
ops <span class="token operator">=</span> <span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
Xs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

st <span class="token operator">=</span> SegmentTree<span class="token punctuation">(</span>N<span class="token punctuation">,</span> nums<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">:</span>
    left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> op<span class="token punctuation">,</span>X <span class="token operator">=</span> lefts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ops<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    st<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>op<span class="token punctuation">,</span>X<span class="token punctuation">)</span>
res <span class="token operator">=</span> <span class="token punctuation">[</span>st<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> r <span class="token keyword">in</span> res<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69),e=[o];function c(l,u){return s(),a("div",null,e)}const r=n(t,[["render",c],["__file","xhs20230326.html.vue"]]);export{r as default};
