import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<h1 id="拼多多0517-笔试-上" tabindex="-1"><a class="header-anchor" href="#拼多多0517-笔试-上" aria-hidden="true">#</a> 拼多多0517 笔试（上）</h1><p><strong>前言</strong></p><p>后面两道题还没来得及写，后面再发。今晚先分享前两题，有需要的同学也可以关注后续。</p><h2 id="多多的商品编号" tabindex="-1"><a class="header-anchor" href="#多多的商品编号" aria-hidden="true">#</a> 多多的商品编号</h2><p>多多君接到了一个给活动商品编号的任务:每次可选的商品编号区间是[L,R]。 由于活动的日期定在05月20号，多多君认为包含5，20和520的编号是有特殊含义，准备保留给对应的商品。 例如:618520,其中包含了520，是一个特殊编号;而12368就是一个普通编号。 多多君想知道，在可选的商品编号区间内，有多少符合上面要求的特殊编号。</p><p><strong>输入描述</strong></p><p>第一行，1个整数T，表示每次可选的编码区间。( 1 &lt;=T&lt;= 1,000 ) 接下来T行，每行2个整数:L和R，表示编码可选的区间(闭区间，即包括L和R)。 ( 1&lt;=L&lt;=R&lt;= 1,000,000 )</p><p><strong>输出描述</strong></p><p>共T行，每行3个整数，分别表示对应区间里的5、20和520的编号数量</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
1 20
100 1000
520 5200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2 1 0
252 19 1
1441 187 6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>对于第一组可选编号区间:[1,20]，符合要求的特殊编号包括:
{ 5,15,20}，其中包括5的有2个，20的1个，520的0个。
对于第三组可选编号区间:[520,5200]，包含520的特殊编号包括:
{ 520，1520，2520，3520，4520，5200 }，共6个。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>前缀和模拟即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mxn <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">6</span>
pre5<span class="token punctuation">,</span> pre20<span class="token punctuation">,</span> pre520 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>mxn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>mxn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>mxn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    pre5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pre20<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pre520<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre5<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pre20<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pre520<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token string">&#39;5&#39;</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
        pre5<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token operator">+</span><span class="token number">1</span>
    <span class="token keyword">if</span> <span class="token string">&#39;20&#39;</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
        pre20<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span> <span class="token string">&#39;520&#39;</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
        pre520<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

T <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>
    L<span class="token punctuation">,</span> R <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>pre5<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">-</span> pre5<span class="token punctuation">[</span>L<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>pre20<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">-</span> pre20<span class="token punctuation">[</span>L<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>pre520<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">-</span> pre520<span class="token punctuation">[</span>L<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多多的植树计划iv" tabindex="-1"><a class="header-anchor" href="#多多的植树计划iv" aria-hidden="true">#</a> 多多的植树计划IV</h2><p>多多君在多多农场的某块林地上种了N颗树苗（(编号1~N)，其中第i颗树有健康度Hi。 多多君计划给树苗们浇水，每次给某棵树苗浇水可以使其健康度上升A点;同时由于水的流动，其他树苗的健康度都会上升B点(其中A大于等于B)。 为了每棵树苗都能够顺利成长，多多君希望所有树苗的健康度都大于或等于M。多多君想知道，在达到这个目标的前提下，最少的浇水次数是多少。</p><p><strong>输入描述</strong></p><p>第一行，4个整数N，M，A和B，分别表示农场中树苗的数量、目标达到的健康度、直接浇水增加的健康度和间接浇水增加的健康度。( 1 &lt;= N,M,A,B&lt;= 1,000,000，A &gt;=B) 接下来N行，每行1个整数Hi，分别表示第i棵树苗初始的健康度Hi。(0&lt;= Hi &lt;= 1,000,000 )</p><p><strong>输出描述</strong></p><p>共一行，1个整数，表示最少的浇水次数使得所有树苗都能达到目标的健康度。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4 10 5 3
2
3
6
8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>两次浇水:
第一次浇水选择第1号树苗，树苗们的健康度变为:{7，6，9,11}
第二次浇水选择第2号树苗，树苗们的健康度变为:{ 10,11，12,14 }
满足所有树苗的健康度都大于或等于10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例2</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3 20 10 5
10
5
0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>二分答案。</p><p>check()函数要注意，不能把所有的树都去 +B，而是要做一部转换。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> heapq
<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict

N<span class="token punctuation">,</span>M<span class="token punctuation">,</span>A<span class="token punctuation">,</span>B <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

healths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>
    healths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

healths<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    nums <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>healths<span class="token punctuation">)</span>
    heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    target <span class="token operator">=</span> M
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 最小的增加 A  其他的增加B</span>
        <span class="token comment"># 逆向思维， 当其他的增加B的时候，相当于目标值减少B</span>
        <span class="token comment">#    最小值则是增加了 （A-B）</span>
        minn <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> minn <span class="token operator">+</span> A <span class="token operator">-</span> B<span class="token punctuation">)</span>
        target <span class="token operator">-=</span> B

    <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> target

l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">6</span>
<span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
    mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span>
    <span class="token keyword">if</span> check<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span> r <span class="token operator">=</span> mid
    <span class="token keyword">else</span><span class="token punctuation">:</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多多的字符翻转" tabindex="-1"><a class="header-anchor" href="#多多的字符翻转" aria-hidden="true">#</a> 多多的字符翻转</h2><p>多多君在研究十六进制字符串的翻转关系，每次可以选择字符串中的某个子串，进行一次整体变大或变小的翻转。 例如: &quot;ABCD&quot;选择中间2个字符的子串&quot;BC&quot;，变大翻转会变成: &quot;ACDD&quot;，变小翻转会变成:&quot;AABD&quot;。 特别的，字符0&#39;变小的翻转会变成字符F&#39;，同理字符&#39;F&#39;的变大翻转会变成字符0&#39;，以此循环往复。 多多君想知道，给定两个字符串A和B，最少可以用多少次翻转使得字符串A变成字符串B。</p><p><strong>输入描述</strong></p><p>第一行，1个整数T，代表测试用例的组数。( 1 &lt;=T&lt;= 1,000 ) 对于每一组测试用例，共一行:2个字符串A和B。 (两个字符串由数字或大写的字母组成，数据保证两个字符串长度相同，并且不超过4)</p><p><strong>输出描述</strong></p><p>对于每组测试用例，输入一行，一个整数，表示字符串A翻转成字符串B的最少步数。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5
AB BC
01 F0
ABCD BDEE
AAA FFF
0AF ABC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1
1
2
5
10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>备注</strong> 十六进制中用字符A~F表示10~15</p><p><strong>思路与代码</strong></p><p>如何将A转成B呢，由于最多只有4个数字，我们可以枚举</p><p>另A=[a1,a2,a3,a4]，不难发现，对于ai，不可能存在先将ai向上翻转，接着由向下翻转，每个元素的翻转应该是 只会朝着一个方向翻转，因此所有的元素的翻转只有3中可能，向上翻转、向下翻转和不翻转(相等则不翻转)，枚举所有组合数应该为 2^4=16种组合。</p><p>ps：这个题直接BFS肯定会超时，或许可以考虑A*来优化BFS。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> math <span class="token keyword">import</span> inf

T <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;5&#39;</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;6&#39;</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;7&#39;</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&#39;8&#39;</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span>
        <span class="token string">&#39;A&#39;</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">}</span>
<span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    A<span class="token punctuation">,</span>B <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
    A<span class="token punctuation">,</span> B <span class="token operator">=</span> <span class="token punctuation">[</span>dic<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> A<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>dic<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> B<span class="token punctuation">]</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">getTime</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 相邻的1和0 要一起操作</span>
        diff <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        time <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>

            j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>
            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> n <span class="token keyword">and</span> path<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> j<span class="token operator">+=</span><span class="token number">1</span>
            j<span class="token operator">-=</span><span class="token number">1</span>

            <span class="token comment"># [i,j]这个区间 共同操作</span>
            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> path<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> diff<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span>
                <span class="token keyword">elif</span> path<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> diff<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span>

            time <span class="token operator">+=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>diff<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            i <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span>
        <span class="token keyword">return</span> time

    ans <span class="token operator">=</span> inf
    <span class="token comment"># path[i] ： 1向上翻转 0向下翻转 2不翻转</span>
    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> n<span class="token punctuation">:</span>
            <span class="token comment"># path 每个位置的翻转可能</span>
            <span class="token keyword">nonlocal</span> ans
            ans <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> getTime<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
            dfs<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
            path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
            dfs<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
            path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
            dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
            path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>

    dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ans

<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>solv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多多的战斗等级" tabindex="-1"><a class="header-anchor" href="#多多的战斗等级" aria-hidden="true">#</a> 多多的战斗等级</h2><p>多多君最近在写一本仙侠玄幻小说，其中有N个人物(分别编号1~N)。 在小说设定中，每个人物战斗力用其等级高低来描述:</p><p>-每个人物属于一个固定的等级z -相同等级内的战斗，由于战斗力接近不能分出胜负 -不同等级之间的战斗，高等级的强者可以稳定击败比自己低的任意等级 多多君在这些人物之间设计了M场战斗，多多君想知道在这些人物里总共有多少种等级数量。</p><p><strong>输入描述</strong></p><p>第一行，1个整数T，代表测试用例的组数。( 1 &lt;=T&lt;= 10 ) 对于每一组测试用例，第一行2个整数N和M，分别代表小说人物的数量和战斗的场数。 ( 1&lt;=N&lt;= 10,000,1 &lt;= M &lt;= 20,000 ) 接下来M行，表示A和B的战斗结果，有三种可能:</p><p>(1)A&gt;B，表示A击败了B (2)A&lt;B，表示A输给了B (3)A=B，表示A和B打平( 1&lt;=A,B&lt;=N)</p><p><strong>输出描述</strong></p><p>对于每组测试用例，如果战斗结果在符合等级设定的情况下，可以确定所有人物里的等级数量，那么输出总共的等级数量; 否则输出-1，表示违反设定或无法确定。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>6
3 2
1 = 2
2 &gt; 3
3 3
1 &gt; 2
2 &gt; 3
3 &gt; 1
3 2
1 &gt; 3
2 &gt; 3
3 2
1 &gt; 2
2 &gt; 3
3 1
1 &gt; 2
1 1
1 &lt; 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
-1
-1
3
-1
-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>第一组用例，由1和2的打平可以得出1和2处于同一等级，而2击败了3，则3属于比1和2更低的等级，因此有:{ 1,2}&gt;{3}，共2种等级。
第二组用例，1击败了2，2击败了3，但是1又输给了3，结果违反设定，且无法确定人物之间的等级。
第三组用例，1和2都击败了3，但1和2之间没有战斗，无法确定1和2之间的等级关系。
第四组用例，有:{1}&gt;{2}&gt;{3}，共3种等级。
第五组用例，3没有任何战斗，无法确定其所在等级。第六组用例，1号自己输给自己，违反了相同等级不能分出胜负的设定。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>这个题想了挺多复杂的算法，最终选择了一个比较直接的算法来解，不过没有经过大量的测试，可能有误，欢迎评论区讨论。</p><p>题目要求等级关系要明确，并且不能有矛盾，我们将给的大小关系建立成一张有向图，不难发现，这个要求其实等价于：满足拓扑排序（无环），并且拓扑排序必须有唯一的结果对应，也就是说每一层只能有一个节点。</p><p>还有一个情况要特殊处理的，就是相等的情况，例如 A = B , B = C, 我们统一将B和C处理成A即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token punctuation">,</span> deque

T <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    N<span class="token punctuation">,</span>M <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    graph <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
    indegre <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token comment">#如果相等  例如  A == B， 所有的B都当作A来处理</span>
    node_cnt <span class="token operator">=</span> N
    eq_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">:</span>
        a<span class="token punctuation">,</span>op<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
        <span class="token keyword">if</span> a <span class="token keyword">in</span> eq_map<span class="token punctuation">:</span> a <span class="token operator">=</span> eq_map<span class="token punctuation">[</span>a<span class="token punctuation">]</span>
        <span class="token keyword">if</span> b <span class="token keyword">in</span> eq_map<span class="token punctuation">:</span> b <span class="token operator">=</span> eq_map<span class="token punctuation">[</span>b<span class="token punctuation">]</span>
        <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">:</span>
            graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
            indegre<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">:</span>
            graph<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
            indegre<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> a <span class="token keyword">in</span> eq_map <span class="token keyword">and</span> b <span class="token keyword">in</span> eq_map<span class="token punctuation">:</span> node_cnt <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> a <span class="token keyword">in</span> eq_map<span class="token punctuation">:</span> eq_map<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> a
            <span class="token keyword">elif</span> b <span class="token keyword">in</span> eq_map<span class="token punctuation">:</span> eq_map<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                eq_map<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> a
                eq_map<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> a
            node_cnt <span class="token operator">-=</span> <span class="token number">1</span>

    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token keyword">in</span> eq_map <span class="token keyword">and</span> eq_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">:</span> <span class="token keyword">continue</span>
        <span class="token keyword">if</span> indegre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>
            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

    cnt <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">#等级不明确</span>
        node <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> nx <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
            indegre<span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> indegre<span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nx<span class="token punctuation">)</span>
        cnt <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">if</span> cnt <span class="token operator">!=</span> node_cnt<span class="token punctuation">:</span>
        <span class="token comment">#成环</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">return</span> cnt


<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>solv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,78),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","拼多多0517 笔试.html.vue"]]);export{r as default};
