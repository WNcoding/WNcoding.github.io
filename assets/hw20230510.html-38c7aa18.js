import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<h1 id="华为0510笔试" tabindex="-1"><a class="header-anchor" href="#华为0510笔试" aria-hidden="true">#</a> 华为0510笔试</h1><div class="custom-container tip"><p class="custom-container-title">前言</p><p>今年华子最简单的一场笔试，为0426参加笔试的同学默哀。。。。</p><p>第一题、第二题都是模拟，进阶版的打卡题。</p><p>第三题也是一个迪杰斯特拉的板子题。</p></div><h2 id="_1、栈数据合并" tabindex="-1"><a class="header-anchor" href="#_1、栈数据合并" aria-hidden="true">#</a> 1、栈数据合并</h2><p>向一个空栈压入正整数，每当压入一个整数时，执行以下规则(设: 栈顶至栈底整数依次编号为n1、n2...nx， n1为最新压入的整数)</p><p>1.如果n1=n2，则n1、n2全部出栈，压入新数据m(m=2*n1)</p><p>2.如果n1=n2+...+ny(y的范围为[3,x]) ，则n1、n2...ny全部出栈，压入新数据m(m=2*n1)。</p><p>3.如果上述规则都不满足，则不做操作</p><p>如: 依次向栈压入6、1、2、3，当压入2时，栈顶至栈底依次为[2、1.6];当压入3时，3=2+1，3、2、1全部出栈，重新入栈整数6，此时栈顶至栈底依次为[6、6]; 6=6，两个6全部出栈，压入12，最终栈中只剩个元素12。</p><p>向栈中输入一串数字，请输出应用此规则后栈中最终存留的数字。</p><p><strong>解答要求</strong></p><p>时间限制: C/C++ 1000ms,其他语言: 2000ms</p><p>内存限制: C/C++ 256MB,其他语言: 512MB</p><p><strong>输入</strong></p><p>使用单个空格隔开的正整数的字符串，如&quot;5 6 7 8”，左边的数字先入栈。</p><p>正整数大小为[1,2^31-1]。</p><p>正整数个数为[1,1000]。</p><p><strong>输出</strong></p><p>最终栈中存留的元素值，元素值使用单个空格隔开，如”8 7 6 5”，从左至右依次为栈顶至栈底的数字。</p><p><strong>样例1</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: 10 20 50 80 1 1
输出: 2 160
解释: 向栈压入80时，10+20+50=80，数据合并后入栈160，压入两个1时，合并为2，最终栈顶至栈底的数字为2和160。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>用栈模拟即可，注意每次压栈都要进行检查。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">and</span> st<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> st<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        num <span class="token operator">=</span> st<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> num<span class="token punctuation">)</span>
        solve<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>
        sum_ <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sum_ <span class="token operator">+=</span> st<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> sum_ <span class="token operator">&gt;=</span> st<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> sum_ <span class="token operator">==</span> st<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> st<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    st<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> sum_<span class="token punctuation">)</span>
                    solve<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> arr<span class="token punctuation">:</span>
    st<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    solve<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">while</span> st<span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、寻找密码串" tabindex="-1"><a class="header-anchor" href="#_2、寻找密码串" aria-hidden="true">#</a> 2、寻找密码串</h2><p>敌占区地下工作者冒死提供了加密后的字符串，需要你根据预先定好的方式进行解密，得到其中真正的密码。加密后字符串M是由0~9这10个数字组成的字符串，你手上是一个给定秘钥数字N和一个运算符k (加减乘中的一个)，需要按如下规则找出直正的密码。</p><p>1.截取M中的某一段数字x，和数字N进行k运算 (x k N)，如果结果是一个所有位数相同的数，则这段数字有可能就是所找密码，例如x为222，N为3，k为&quot;，则计算结果是222*3=666，满足要求，x是所寻目标彩码串之一。</p><p>2.如果存在满足第1点的多种情况，则以计算结果最大的为准;</p><p>3.如果没有找到符合条件的密码串，则输出-1，表示密码串不存在</p><p>3.M的长度&lt;100，N为正整数，且N&lt;=9999999999，3&lt;=所找密码长度&lt;=12。k为+或-或中的一种，不考虑除法。为避免数据过于庞大，约定在乘法场景下，乘数最大为3位数。</p><p><strong>解答要求</strong></p><p>时间限制: C/C++ 1000ms,其他语言: 2000ms</p><p>内存限制: C/C++ 256MB,其他语言: 512MB</p><p><strong>输入</strong> 提供加密后字符串M，秘钥数字N和运算符k，例如：</p><p>(加密字符串M) 748443217098</p><p>(秘钥数字N) 123</p><p>(运算符k) +</p><p><strong>输出</strong></p><p>满足计算结果所有位数相同，且计算结果最大的值。</p><p>例如:上述例子截取44321，和123相加，则为44321+123=44444，结果所有位的数字字符相同，包括个位数、十位数、百位数、千位数和万位数都是同一个数字字符4，且其值最大。</p><p>(目标字符串) 44321</p><p><strong>样例1</strong></p><p>输入：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>6833023887793076998810418710
2211
-
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>9988
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>通过计算，8877-2211=6666，而9988-2211=7777，因为7777&gt;6666，则目标密码串为9988。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>样例2</strong></p><p>输入:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>68846787793076946788418710
4210
+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>884678
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释: 通过计算，符合条件有两个，884678+4210 = 888888，4678+4210=8888。则目标密码串为884678。</p><p><strong>样例3</strong></p><p>输入:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>139804444677899222
2
*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4444
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释:作为乘法场景，乘数最大值为3位数，本用例乘数为2。按要求，44442=8888，2222=444，均符合基本条件，从中选择结果最大值，则目标密码串是4444。</p><p><strong>思路与代码</strong></p><p>由于题目说明了答案肯定是12位以内的答案，因此大胆放心的直接乘吧~</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">is_valid</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>

ans <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> <span class="token builtin">len</span> <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        now <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> is_valid<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>now <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> now<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> c <span class="token operator">==</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> is_valid<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>now <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> now<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> is_valid<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>now <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> now<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、微服务调用链路染色最短时间" tabindex="-1"><a class="header-anchor" href="#_3、微服务调用链路染色最短时间" aria-hidden="true">#</a> 3、微服务调用链路染色最短时间</h2><p>在微服务架构中，一个请求可能会经过若干个服务节点，其所经过的路径，我们称之为请求调用链路。通常，我们会把一些服务治理相关的字段(例traceld)，通过请求头的方式在整个链路中透传。当我们把有特定含义的请求头透传到整个链路，然后链路中每个服务会针对这个请求头做一些特殊的处理，我们把这种行为称之为链路染色。现给出在某一请求下其经过所有微服务节点的响应时长列表rsTimes，其中rsTimes[i]=(srcSerivce,dstService,rsTime)，其中srcSerivce为调用方服务,dstService为被调用方服务，所有服务名称由一个1到n范围内的整数表示，rsTime为接口调用响应耗时。如果srcSerivce与dstService相同，则表示系统自身计算耗时。所以如果服务srcService到dstService的染色总时长为srcService到dstService响应时长+dstService计算耗时，现给出一个调用源头服务名称service，请给出以这个服务作为源头服务发起调用，最终可实现染色的服务个数，并给出这些服务全部完成染色的最短时间。</p><p><strong>解答要求</strong></p><p>时间限制: C/C++ 1000ms,其他语言: 2000ms</p><p>内存限制: C/C++ 256MB,其他语言: 512MB</p><p><strong>输入</strong></p><p>第一行表示服务节点总数m</p><p>第二行表示服务间调用响应耗时或者服务自身计算耗时rsTmes的长度n</p><p>接下来n行表示具体的服务间调用响应耗时或者服务自身计算耗时</p><p>rsTmes[i]，每个数字间用空格隔开，比如 10 20 3，则表示10号服务调用20号服务的耗时为3秒</p><p>最后一行表示调用方源服务名称</p><p>提示:</p><p>1&lt;=rsTimes.lenath&lt;=5000 1&lt;=srcSerivce&lt;=100 1&lt;=dstService&lt;=100 1&lt;=rsTime&lt;=100</p><p><strong>输出</strong></p><p>输出分为两行，第一行输出最终可实现染色的微服务个数，第二行输出这些服务全部完成染色的最短时间</p><p><strong>样例1</strong></p><p><strong>输入:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5
9
1 1 3
1 2 6
1 3 10
3 3 8
2 2 7
2 4 12
2 5 20
5 5 5
4 4 9
1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5
38
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解释:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>以服务1为起点计算最长耗时链路，分析可能会存在三条最大耗时链路，分别为1-&gt;3以及1-&gt;2-&gt;5以及1-2-4
第一条路径1-&gt;3路径下，总耗时为10(1-&gt;3耗时)+8(3自身耗时)=18秒
第二条路径1-&gt;2-&gt;5路径下，总耗时为6(1-&gt;2耗时)+7(2自身耗时)+20(2-5耗时)+5(5自身耗时)=38秒
第三条路径1-&gt;2-&gt;4路径下，总耗时为6(1-&gt;2耗时)+7(2自身耗时)+12(2-&gt;4耗时)+9(4自身耗时)=34秒
所以在此场景下，服务5完成染色的最短时间为38秒，为可以染色的所有服务节点的最长时间
最终输出结果分两行输出，最终1 2 3 4 5四个服务节点都可以实现染色，所以最终输出结果如下
5
38
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例2</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
5
1 2 5
2 3 10
1 3 3
3 1 2
3 2 9
3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>从源点出发做一次迪杰斯特拉，找到最大的最小距离，计算可以达到的节点数量即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> heapq
<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict
<span class="token keyword">from</span> math <span class="token keyword">import</span> inf

n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

sysTime <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
nxs <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s<span class="token punctuation">,</span>d<span class="token punctuation">,</span>t <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> s <span class="token operator">!=</span> d<span class="token punctuation">:</span> nxs<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        sysTime<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> t

start <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 距离 节点</span>
dis <span class="token operator">=</span> <span class="token punctuation">[</span>inf <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
dis<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">while</span> h<span class="token punctuation">:</span>
    time<span class="token punctuation">,</span> node <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>h<span class="token punctuation">)</span>
    <span class="token keyword">for</span> nx<span class="token punctuation">,</span> nxtime <span class="token keyword">in</span> nxs<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> dis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">&gt;</span> time <span class="token operator">+</span> sysTime<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token operator">+</span> nxtime<span class="token punctuation">:</span>
            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> sysTime<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token operator">+</span> nxtime<span class="token punctuation">,</span> nx<span class="token punctuation">)</span><span class="token punctuation">)</span>
            dis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">,</span> time <span class="token operator">+</span> sysTime<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token operator">+</span> nxtime<span class="token punctuation">)</span>


cnt<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
<span class="token keyword">for</span> d <span class="token keyword">in</span> dis<span class="token punctuation">:</span>
    <span class="token keyword">if</span> d <span class="token operator">!=</span> inf<span class="token punctuation">:</span>
        cnt<span class="token operator">+=</span><span class="token number">1</span>
        res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> d<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,92),i=[e];function o(c,l){return s(),a("div",null,i)}const r=n(t,[["render",o],["__file","hw20230510.html.vue"]]);export{r as default};
