import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<h2 id="_1-对称字符串" tabindex="-1"><a class="header-anchor" href="#_1-对称字符串" aria-hidden="true">#</a> 1.对称字符串</h2><p>对于给定的字符串，可以分成若干子串，若分成的每个子串都能够根据类似纸张折叠式的对称，我们认为它为对称字符串。请输入进行判断是否为对称字符串，如果判断成功则返回True，否则返回False。</p><p><strong>输入描述</strong></p><p>1个字符串</p><p>字符串长度：1 &lt;= len &lt;= 1000</p><p><strong>输出描述</strong></p><p>如果判断成功则返回True，否则返回False。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><p>123321</p><p><strong>输出</strong></p><p>True</p><p><strong>说明</strong></p><p>可以拆分成一个子串，123与321对称，因此字符串满足对称要求。</p><p><strong>示例2</strong></p><p><strong>输入</strong></p><p>12321</p><p><strong>输出</strong></p><p>False</p><p><strong>示例3</strong></p><p><strong>输入</strong></p><p>1233211221</p><p><strong>输出</strong></p><p>True</p><p><strong>说明</strong></p><p>可以拆分成两个子串，&quot;123321&quot;与 &quot;1221&quot;。这两个字符串的对称的，因此整体满足要求</p><p><strong>思路与代码</strong></p><p>所有的折叠串，就是长度为偶数的回文串。我们需要首先预处理出dp数组，其中dp[i, j]表示的是区间[i,j]是否为回文串。接下来枚举长度为偶数的回文子串即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token keyword">if</span> n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>
    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> j<span class="token punctuation">:</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
            <span class="token keyword">elif</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> j<span class="token punctuation">:</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">and</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>

    p<span class="token punctuation">,</span> np <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
    <span class="token keyword">while</span> p <span class="token operator">&lt;</span> n <span class="token keyword">and</span> np <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>

        <span class="token keyword">while</span> np <span class="token operator">&lt;</span> n <span class="token keyword">and</span> p<span class="token operator">!=</span> np <span class="token keyword">and</span> <span class="token keyword">not</span> dp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">:</span>
            np <span class="token operator">+=</span> <span class="token number">2</span>

        <span class="token keyword">if</span> np <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> dp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>
            p<span class="token punctuation">,</span>np <span class="token operator">=</span> np<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> np<span class="token operator">+</span><span class="token number">2</span>

    <span class="token keyword">return</span> <span class="token boolean">True</span>


<span class="token keyword">print</span><span class="token punctuation">(</span>solv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-折叠数组" tabindex="-1"><a class="header-anchor" href="#_2-折叠数组" aria-hidden="true">#</a> 2.折叠数组</h2><p>存在一个无重复值的升序数组nums，在nums的下标k处进行折叠，将前端折叠后拼接到nums数组的尾部，使得数组变为nums[k],nums[k+1]....,nums[n-1],nums[0]....nums[k-1]。</p><p>对于一个折叠后的nums数组，和一个整数target，如果nums中存在target，则返回target所在的下标，否则返回-1。</p><p>注意，复杂度O(n)不得分。</p><p><strong>思路与代码</strong></p><p>二分找到折叠处</p><p>分成两段数组进行二分。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">findpoint</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
        mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> mid
        <span class="token keyword">elif</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            right <span class="token operator">=</span> mid
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>

    <span class="token keyword">return</span> left

<span class="token keyword">def</span> <span class="token function">bs</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>
    l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>
        mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>
            <span class="token keyword">return</span> mid
        <span class="token keyword">elif</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>
            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> findpoint<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    ls <span class="token operator">=</span> bs<span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>
    <span class="token keyword">if</span> ls <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> ls

    rs <span class="token operator">=</span> bs<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>
    <span class="token keyword">if</span> rs <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> rs

    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>



nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
target <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>solv<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","sxf20230321.html.vue"]]);export{r as default};
