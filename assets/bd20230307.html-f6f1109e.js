import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},o=p(`<h2 id="银行排队" tabindex="-1"><a class="header-anchor" href="#银行排队" aria-hidden="true">#</a> 银行排队</h2><p>时间限制:3000MS 内存限制:589824KB</p><p><strong>题目描述:</strong></p><p>某银行将客户分为了若干个优先级,1级最高,5级最低,当你需要在银行办理业务时,优先级高的人随时可以插队到优先级低的人的前面。现在给出一个人员到来和银行办理业务的时间序列,请你在每次银行办理业务时输出客户的编号。如果同时有多位优先级相同且最高的客片,则按照先来后到的顺序办理。</p><p><strong>输入描述</strong></p><p>输入第一行是一个正整数n ,表示输入的序列中的事件数量。(1&lt;=n&lt;=500)</p><p>接下来有n行,每行第一个字符为a或p。当字符为a时，后面会有两个的正整数num和x,表示到来的客户编号为num,优先级为×；当字符为p时,表示当前优先级最高的客户去办理业务。</p><p><strong>输出描述</strong></p><p>输出包含若干行,对于每一个p,输出一行,仅包含一个止整数num,表示办理业务的客户编号。</p><p><strong>测试样例</strong></p><p>**输入：</p><p>**</p><p>4</p><p>a 1 3</p><p>a 2 2</p><p>a 3 2</p><p>p</p><p><strong>输出</strong></p><p>2</p><p><strong>思路</strong></p><p>使用优先队列进行模拟</p><p><strong>代码展示：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#include &lt;iostream&gt;</span>
<span class="token comment">#include &lt;queue&gt;</span>
using namespace std<span class="token punctuation">;</span>

struct <span class="token builtin">cmp</span> <span class="token punctuation">{</span>
    <span class="token builtin">bool</span> operator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>const vector<span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> const vector<span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> const <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token builtin">int</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    priority_queue<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> <span class="token builtin">cmp</span><span class="token operator">&gt;</span> pq<span class="token punctuation">;</span>
    <span class="token builtin">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        string op<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> op<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">int</span> num<span class="token punctuation">,</span> x<span class="token punctuation">;</span>
            cin <span class="token operator">&gt;&gt;</span> num <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>
            pq<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">{</span>num<span class="token punctuation">,</span> x<span class="token punctuation">,</span> cnt<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> pq<span class="token punctuation">.</span>top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            pq<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="魔法师" tabindex="-1"><a class="header-anchor" href="#魔法师" aria-hidden="true">#</a> 魔法师</h2><p>的问限制:3000MS</p><p>内存限制:589824KB</p><p><strong>题目描述:</strong></p><p>魔法师小树有n个魔法元素，他把它们排成一行，从左到右第i个魔法元素的能量值是一个非零整</p><p>数ai。小树每次施展魔法的方式是挑选一段连续非空的魔法元素,将它们的能量值乘起来，得到</p><p>值就是这次魔法的总能量。如果总能量大于零即为白风法,否则为黑魔法。</p><p>现在小树想知道施展—个白魔法或黑魔法的方案数分别有多少。两个方案不同是指挑选的连续区间不同。</p><p><strong>输入描述</strong></p><p>第一行有一个整数n(1&lt;= n &lt;= 2 * 10^5),表示魔法元素的个数。</p><p>第二行有n个整数a1,a2,....,an (-10^9 &lt;= ai &lt;= 10^9; ai != 0)代表魔法元素的能量值。</p><p><strong>输出描述</strong></p><p>输出两个整数，分别表示施展一个黑魔法和施展一个白魔法的方案数</p><p><strong>测试样例</strong></p><p><strong>输入</strong></p><p>5</p><p>5 -3 3 -1 1</p><p><strong>输出</strong></p><p>8 7</p><p><strong>代码展示</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#include &lt;iostream&gt;</span>
using namespace std<span class="token punctuation">;</span>

<span class="token builtin">int</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token builtin">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">int</span> dp1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">//</span>以第i个元素结尾，乘积为正的子串数量
    <span class="token builtin">int</span> dp2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">//</span>以第i个元素结尾，乘积为负的子串数量
    
    dp1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> ? <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    dp2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> ? <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token builtin">int</span> w <span class="token operator">=</span> dp1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> dp2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> dp1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        w <span class="token operator">+=</span> dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        b <span class="token operator">+=</span> dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> w <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),e=[o];function c(l,i){return s(),a("div",null,e)}const r=n(t,[["render",c],["__file","bd20230307.html.vue"]]);export{r as default};
