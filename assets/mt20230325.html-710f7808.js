import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<h2 id="火车迷" tabindex="-1"><a class="header-anchor" href="#火车迷" aria-hidden="true">#</a> 火车迷</h2><p>时间限制： 3000MS 内存限制： 589824KB</p><p><strong>题目描述：</strong></p><p>小美是一个火车迷。最近她在观察家附近火车站的火车驶入和驶出情况，发现火车驶入和驶出的顺序并不一致。经过小美调查发现，原来这个火车站里面有一个类似于栈的结构，如下图所示：</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/28539630/1679745773787-84325508-c08c-4c8d-abe3-16a3788d8d20.png" alt="img"></p><p>例如可能1号火车驶入了火车站中的休息区s，在驶出之前2号火车驶入了。那么在这种情况下，1号火车需要等待2号火车倒车出去后才能出去（显然被后面驶入的2号火车挡住了，这个休息区s只有一个出入口）。</p><p>出于好奇，小美统计了近些天的火车驶入驶出情况，开始统计和结束统计时休息区s中均是空的。由于中途疏忽，小美觉得自己好像弄错了几个驶入驶出顺序，想请你帮她验证一下。值得注意的是，小美虽然可能弄错了顺序，但对火车的记录是不重不漏的。</p><p>形式化地来形容休息区s，我们视其为一个容量无限大的空间，假设两列火车 i 和 j 同时处于休息区s中，驶入时刻Tin满足Tin(i)&lt;Tin(j)，则驶出时间Tout必定满足Tout(i)&gt;Tout(j)，即，先进后出。</p><p><strong>输入描述</strong></p><p>第一行一个整数T表示数据组数。</p><p>对每组测试而言：</p><p>第一行一个整数n，表示观察到的火车数量。</p><p>第二行n个整数x1,x2,...,xn，表示小美记录的火车驶入休息区s的顺序。</p><p>第三行n个整数y1,y2,...,yn，表示小美记录的火车驶出休息区s的顺序。</p><p>1≤T≤10,1≤n≤50000,1≤xi,yi≤n, 且{xn} 、{yn} 均为{1,2,3,...,n}的一个排列，即1~n这n个数在其中不重不漏恰好出现一次。</p><p><strong>输出描述</strong></p><p>对每组数据输出一行：如果小美记录的驶入和驶出顺序无法被满足则输出No，否则输出Yes。</p><p>样例输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3 
3
1 2 3 
1 2 3 
3 
1 2 3 
3 2 1 
3 
1 2 3 
3 1 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Yes 
Yes 
No
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示</strong></p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>对第一组数据：
每辆火车刚驶入便立刻驶出即可满足此记录。
对第二组数据：
[ &lt;- 休息区出口  （空 初始状态）
[1  &lt;- 休息区出口 （1号驶入）
[1 2 &lt;- 休息区出口 （2号驶入）
[1 2 3 &lt;- 休息区出口 （3号驶入）
[1 2 &lt;- 休息区出口 （3号驶出）
[1 &lt;- 休息区出口 （2号驶出）
[ &lt;- 休息区出口 （1号驶出）
记录可以被此种方案满足。
对第三组数据：
[ &lt;- 休息区出口  （空 初始状态）
[1  &lt;- 休息区出口 （1号驶入）
[1 2 &lt;- 休息区出口 （2号驶入）
[1 2 3 &lt;- 休息区出口 （3号驶入）
[1 2 &lt;- 休息区出口 （3号驶出）
发现1号被2号堵住，无法先于2号驶出。
可以证明，亦不存在其他驶入驶出方案使得第三组数据满足要求。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>整体的思想是使用栈模拟。</p><p>我们使用2个指针，分别指向入队序列和出队序列。入队序列的元素挨个加入栈中，当栈顶元素等于当前出队序列的指针所指向的元素，则说明该元素成功匹配，直接出栈即可。直到所有元素都遍历完，判断是否出队序列的所有元素都遍历完成。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>T <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    inseq <span class="token operator">=</span> <span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    outseq <span class="token operator">=</span> <span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

    sk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    j <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        sk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>inseq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> sk <span class="token keyword">and</span> sk<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> outseq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            sk<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
            j<span class="token operator">+=</span><span class="token number">1</span>

    <span class="token keyword">return</span> <span class="token keyword">not</span> sk <span class="token keyword">and</span> j <span class="token operator">==</span> n


<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> solv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分糖" tabindex="-1"><a class="header-anchor" href="#分糖" aria-hidden="true">#</a> 分糖</h2><p>时间限制： 1000MS 内存限制： 65536KB</p><p><strong>题目描述：</strong></p><p>小美因乐于助人的突出表现获得了老师的嘉奖。老师允许小美从一堆n个编号分别为1,2,...,n的糖果中选择任意多个糖果作为奖励（每种编号的糖果各一个），但为了防止小美一次吃太多糖果有害身体健康，老师设定了一个限制：如果选择了编号为 i 的糖果，那么就不能选择编号为 i-1, i-2, i+1, i+2的四个糖果了。在小美看来，每个糖果都有一个对应的美味值，小美想让她选出的糖果的美味值之和最大！作为小美的好朋友，请你帮帮她！</p><p><strong>输入描述</strong></p><p>第一行一个整数n，表示糖果数量。</p><p>第二行n个整数a1,a2,...,an，其中ai表示编号为 i 的糖果的美味值。</p><p>1≤n≤50000 , 1≤ai≤10000</p><p><strong>输出描述</strong></p><p>输出一行一个数，表示小美能获得的糖果美味值之和最大值。</p><p>样例输入</p><p>7</p><p>3 1 2 7 10 2 4</p><p><strong>样例输出</strong></p><p>14</p><p>提示</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>最优的方案是选择编号为1，4，7的糖果。
如果选了编号为5的美味值为10的那颗糖果，最多能获得的美味值仅为13，不如上述方案优。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>题目的描述具有一定的混淆，实际上就是LC的打家劫舍。</p><p>题目要求：“如果选择了编号为 i 的糖果，那么就不能选择编号为 i-1, i-2, i+1, i+2的四个糖果了”，实际上这个限制我们只需要从从下标为0 的元素往后考虑（线性的遍历），并且当我们选择了元素i的时候，i+1,i+2均不考虑，直接考虑i+3，这就已经满足了这个约束了，因为我们是从前往后遍历的。因此状态转移方程为： f[i] = max(f(i+1), f(i+3)+nums[i])。</p><p>可以用记忆化搜索或者动态规划来完成。</p><p><strong>Python</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> functools <span class="token keyword">import</span> cache

n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token decorator annotation punctuation">@cache</span>
<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> n<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>C++</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> mxn <span class="token operator">=</span> <span class="token number">50001</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>mxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span>mxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="春游" tabindex="-1"><a class="header-anchor" href="#春游" aria-hidden="true">#</a> 春游</h2><p>时间限制： 1000MS 内存限制： 65536KB</p><p><strong>题目描述：</strong></p><p>小美明天要去春游了。她非常喜欢吃巧克力，希望能够带尽可能多的巧克力在春游的路上吃。她现在有n个巧克力，很巧的是她所有的巧克力都是厚度一样的正方形的巧克力板，这n个巧克力板的边长分别为a1,a2,...,an。因为都是厚度一致的正方形巧克力板，我们认为第 i 个巧克力的重量为<img src="https://cdn.nlark.com/yuque/0/2023/png/28539630/1679744939297-c0bf3654-8920-4ee8-b52e-5155d5cd3964.png" alt="img">。小美现在准备挑选一个合适大小的包来装尽可能多的巧克力板，她十分需要你的帮助来在明天之前准备完成，请你帮帮她。</p><p><strong>输入描述</strong></p><p>第一行两个整数n和m，表示小美的巧克力数量和小美的询问数量。</p><p>第二行n个整数a1,a2,...,an，表示n块正方形巧克力板的边长。注意你不能将巧克力板进行拆分。</p><p>第三行m个整数q1,q2,...,qm，第 i 个整数qi表示询问：如果小美选择一个能装qi重量的包，最多能装多少块巧克力板？（不考虑体积影响，我们认为只要质量满足要求，巧克力板总能塞进包里）</p><p>1≤n,m≤50000,1≤ai≤10^4,1≤qi≤10^18</p><p><strong>输出描述</strong></p><p>输出一行m个整数，分别表示每次询问的答案。</p><p>样例输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5 5 
1 2 2 4 5 
1 3 7 9 15
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>样例输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 1 2 3 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提示</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>包最大重量为1，能装12
包最大重量为3，也最多只能装12重量（如果添加22就超载了）
包最大重量为7，能装12+22
包最大重量为9，能装 12+22+22（因为有两块巧克力板边长都为2）
包最大重量为15，也最多能装 12+22+22（如果添加42就超载了）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>可能大部分同学看到这道题会想到 <strong>01背包</strong> 的DP（背包容量为qi，每个物品的体积为ai^2，每个物品的价值为1），但是我们发现 qi 的范围是 10^18，因此dp肯定是做不了的。<strong>由于每个物品的价值是1，所以我们无论选择体积多大的物品，收益都是一样的，所以我们可以直接优先选择体积小的物品</strong>，也就是一个贪心的思路。</p><p>但是由于m和n都比较大，直接模拟这个过程复杂度会去到O(n*m)，依然会TLE的，所以这里我们需要用一些技巧来解决。</p><p><strong>前缀和+二分</strong></p><p>我们首先对于每个糖果的平方按照大小排序后，求一个前缀和pres（见模板），然后对于每一个qi，最多可以选择多少个糖果 等价于 找到pres中 小于等于qi的最大值的下标。因此复杂度可以优化为O(m*logn)。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
Q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
pres <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> pres<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pres<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span>

<span class="token keyword">for</span> q <span class="token keyword">in</span> Q<span class="token punctuation">:</span>
    l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n
    <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
        <span class="token keyword">if</span> pres<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> q <span class="token punctuation">:</span> r <span class="token operator">=</span> mid
        <span class="token keyword">else</span><span class="token punctuation">:</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解释器" tabindex="-1"><a class="header-anchor" href="#解释器" aria-hidden="true">#</a> 解释器</h2><p>时间限制： 3000MS 内存限制： 589824KB</p><p><strong>题目描述：</strong></p><p>小美因为自己差劲的表达能力而苦恼，小美想制作一个解释器，这样她可以在无法表达的情况下让解释器帮她解释。好巧不巧小美翻开了编译原理的书，找到了解释器的制作方式，她决定先制作一个书上习题中描述的小小解释器试试。</p><p>小美需要读入一行字符串，其格式为&quot;key1=val1; key2=val2; ...; keyn-1=valn-1; keyn=valn;&quot;(不包含引号)这样的n对key,value对，其中keyi和vali为第 i 对key,value对，且均为仅包含大小写英文字母、数字与斜杠的非空字符串。例如对于字符串&quot;SHELL=/bin/bash;HOME=/home/xiaomei;LOGNAME=xiaomei;&quot;，那么其中包含三对key,value对，以(key,value)形式展示，分别为(SHELL,/bin/bash)、(HOME,/home/xiaomei)、(LOGNAME,xiaomei)。</p><p>接下来，小美的解释器需要接受q次询问，每次询问给出一个仅包含大小写英文字母、数字与斜杠的非空字符串，如果存在某对key,value对的key值与之相同，那么输出对应的value；如果存在多对key,value对的key值与之相同，那么输出其中编号最大的，也即最后那一对的value值；如果一对也不存在，那么输出EMPTY。</p><p><strong>输入描述</strong></p><p>第一行一个字符串S，满足题中所述格式。</p><p>接下来一个整数q，表示有q个询问。</p><p>接下来q行，每行一个仅包含大小写英文字母、数字与斜杠的非空字符串，分别为S1,S2,...,Sq，依次表示q次询问。</p><p>令|S|表示字符串S的长度。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/28539630/1679744952282-e9125d44-cbc4-4d6e-82f6-11aaa48c7665.png" alt="img"> S中至少包含一对key,value对。</p><p><strong>输出描述</strong></p><p>输出q行，每行一个字符串表示答案。</p><p><strong>样例输入</strong></p><p>LOGNAME=default;SHELL=/bin/bash;HOME=/home/xiaomei;LOGNAME=xiaomei;</p><p>4</p><p>SHELL</p><p>HOME</p><p>LOGNAME</p><p>logname</p><p><strong>样例输出</strong></p><p>/bin/bash</p><p>/home/xiaomei</p><p>xiaomei</p><p>EMPTY</p><p><strong>提示</strong></p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>第3个询问有两对满足，分别是第1对和第4对，选择编号大的（也就是后者），为xiaomei而不是default。
第4个询问不存在满足的，输出EMPTY。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>看似复杂，实际上是这场比试最简单的题目，童叟无欺，大家都能做。</p><p>整体思路使用哈希表进行模拟。可能字符串处理需要注意一下。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># 将输入的字符串解析为字典</span>
    pairs <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span>
    pairs_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> pair <span class="token keyword">in</span> pairs<span class="token punctuation">:</span>
        <span class="token keyword">if</span> pair<span class="token punctuation">:</span>
            key<span class="token punctuation">,</span> value <span class="token operator">=</span> pair<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span>
            pairs_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value

    <span class="token comment"># 对于每个查询，根据题目要求输出结果</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
        query <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>pairs_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token string">&quot;EMPTY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="糖果盛宴" tabindex="-1"><a class="header-anchor" href="#糖果盛宴" aria-hidden="true">#</a> 糖果盛宴</h2><p>时间限制： 1000MS 内存限制： 65536KB</p><p><strong>题目描述：</strong></p><p>小美特别爱吃糖果。小美家楼下正好有一个糖果专卖店，每天供应不同种类的糖果。小美预先拿到了糖果专卖店接下来n天的进货计划表，并针对每天的糖果种类标注好了对小美而言的美味值。小美当然想每天都能去买糖果吃，不过由于零花钱限制（小美零花钱并不多！）以及健康考虑，小美决定原则上如果今天吃了，那么明天就不能吃。但小美认为凡事都有例外，所以她给了自己k次机会，在昨天已经吃了糖果的情况下，今天仍然连续吃糖果！简单来说，小美每天只能吃一次糖果，原则上如果昨天吃了糖果那么今天就不能吃，但有最多k次机会打破这一原则。</p><p>小美不想浪费每次吃糖果的机会，所以请你帮帮她规划一下她的吃糖果计划，使得她能吃到的糖果美味值最大。</p><p><strong>输入描述</strong></p><p>第一行两个整数n和k，表示拿到的进货计划表的天数和最多打破原则的次数。</p><p>第二行n个整数a1,a2,...,an，其中ai表示接下来第 i 天糖果专卖店的糖果的美味值。</p><p>1≤n≤2000,1≤k≤1000,1≤ai≤10000</p><p><strong>输出描述</strong></p><p>输出一行一个数，表示小美能吃到的糖果美味值之和最大值。</p><p><strong>样例输入</strong></p><p>7 1</p><p>1 2 3 4 5 6 7</p><p><strong>样例输出</strong></p><p>19</p><p><strong>提示</strong></p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>最优的方案是选择选择第2、4、6天吃糖果，并在第7天打破一次原则也吃糖果（因为第6天已经吃过，原则上不能继续吃，需要使用一次打破原则的机会）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>明显的一道动态规划的题目。类似一个变种的背包问题。</p><p>每一个糖果都有以下几种选择：</p><ol><li>不吃</li><li>正常吃，此时不能考虑下一个糖果，只能跳一个。</li><li>特权吃，可以考虑下一个糖果。</li></ol><p>因此不难得出以下方程：</p><p>f[i,j]表示从第i个糖果往后考虑，有j次打破特权的机会，可以获取的最大美味值是多少。</p><p>f[i,j] = max(f(i+1,j), f(i+2,j)+a[i], f(i+1,j-1)+a[i])，分别表示取这三种选择的最大值。</p><p>这个过程可以用记忆化搜索或者DP来完成。</p><p>Python</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> functools <span class="token keyword">import</span> cache

n<span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token decorator annotation punctuation">@cache</span>
<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> n<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>
    cur <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span> cur <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> cur

<span class="token keyword">print</span><span class="token punctuation">(</span>dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C++</p><div class="language-C++ line-numbers-mode" data-ext="C++"><pre class="language-C++"><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;

using namespace std;

int n,k;
int a[2010];
int dp[2001][1001];
int dfs(int i, int j) {
  if (i &gt;= n) return 0;
  if (dp[i][j] != -1) return dp[i][j];
  int cur = dfs(i+1,j);
  cur = max(cur, dfs(i+2,j) + a[i]);
  if (j &gt;= 1) cur = max(cur, dfs(i+1,j-1) + a[i]);
  return dp[i][j] = cur;
}

int main() {
  cin &gt;&gt; n &gt;&gt; k;
  for (int i = 0 ; i &lt; n ; i++) cin &gt;&gt; a[i];
  for (int i = 0 ; i &lt; n ; i++) memset(dp[i], -1, sizeof dp[i]);
  cout &lt;&lt; dfs(0, k) &lt;&lt; endl;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,137),i=[e];function o(c,l){return s(),a("div",null,i)}const r=n(t,[["render",o],["__file","mt20230325.html.vue"]]);export{r as default};
