import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<h1 id="美团0513" tabindex="-1"><a class="header-anchor" href="#美团0513" aria-hidden="true">#</a> 美团0513</h1><h2 id="小美的整数" tabindex="-1"><a class="header-anchor" href="#小美的整数" aria-hidden="true">#</a> 小美的整数</h2><p><strong>时间限制：</strong> 3000MS <strong>内存限制：</strong> 589824KB</p><p><strong>题目描述：</strong></p><p>小美有两个数字，其中第一个数字是任意的正整数，第二个数字是一位仅可能为0到9间的整数。小美希望能将第二个插入第一个数字中，以得到最大的数字。具体可参见输入输出样例。</p><p>输入描述</p><p>单个测试用例包含T组数据</p><p>第一行一个数字表示T</p><p>对于每一组数据，包含一行有2个空格隔开的整数，表示任意正整数a和待插入的数字b。</p><p>1≤T≤10, 1≤a≤1050000, 0≤b≤9</p><p>输出描述</p><p>对于每组数据，输出一行，包括一个整数，得到的最大整数。</p><p>样例输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4
76543 4
1 0
44 5
666 6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>样例输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>765443
10
544
6666
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>打卡题。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>T <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    s <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> b<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>
    solv<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小美比赛" tabindex="-1"><a class="header-anchor" href="#小美比赛" aria-hidden="true">#</a> 小美比赛</h2><p><strong>时间限制：</strong> 3000MS <strong>内存限制：</strong> 589824KB</p><p><strong>题目描述：</strong></p><p>小美在参加送外卖比赛。比赛共有n个人参加，其中第 i 人的能力值为 i 。每个人有颜色黄或蓝。如果不同颜色对决，则能力大者赢。如果相同颜色对决，则能力小者赢。所有人都会两两比赛，请给出每个人能赢多少场。</p><p>输入描述</p><p>单个测试用例包含多组数据</p><p>第一行一个整数T，表示接下来有T组数据</p><p>对于每一组数据，包含两行数据，第一行是人数n。</p><p>第二行有n个数 ai（ai只会取0或1），0表示黄色，1表示蓝色。</p><p>数字间两两空格隔开。</p><p>1≤T≤5，1≤n≤50000，0≤ai≤1</p><p>输出描述</p><p>对于每组数据，输出一行，包括n个整数，每个整数表示每个人能赢多少场。</p><p>样例输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
3
0 0 1
4
1 0 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>样例输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 0 2
1 2 1 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>提示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>样例第一行为T，表示接下来有2组数据。其中第一组中，第一个人会赢第二个人，第三个人会赢前两个人，所以答案为1 0 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>前缀和模拟即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>T <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token comment"># 颜色不同，能大的赢</span>
    <span class="token comment"># 否则，能力小的赢</span>
    <span class="token comment"># 先判断颜色相同： 前缀和</span>
    <span class="token comment"># 颜色不同 后缀和</span>
    pres0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    pres1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> colors<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            pres0<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> pres0<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
            pres1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> pres1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            pres1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> pres1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
            pres0<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pres0<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token keyword">if</span> colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            pre <span class="token operator">=</span> pres0
            opre <span class="token operator">=</span> pres1
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            pre <span class="token operator">=</span> pres1
            opre <span class="token operator">=</span> pres0
        <span class="token comment"># 颜色相同的</span>
        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> opre<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token comment"># 颜色不同</span>
        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> pre<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> pre<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> res<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>
    solv<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小美排序" tabindex="-1"><a class="header-anchor" href="#小美排序" aria-hidden="true">#</a> 小美排序</h2><p><strong>时间限制：</strong> 3000MS <strong>内存限制：</strong> 589824KB</p><p><strong>题目描述：</strong></p><p>n的排列是指有一个长度为n的数组[pi]中所有数各不相同，并且均在1到n之间，例如[3, 1, 2]是3的排列。小美想把序列排成递增序列，即[1, 2, 3, …, n]，但她只能进行一种操作。首先她要在排列中任意选择两个不同的数取出。然后她将两个数中较大的放在排列的最后一位，较小的放在排列的第一位。她可以进行无限次这样的操作。请问她最少需要多少次才能将排序排列为递增序列。</p><p><strong>输入描述</strong></p><p>第一行是数组的长度：n。</p><p>第二行有n个数字pi（i=1,2,3,...,n）表示排列。</p><p>1≤n≤50000, 1≤pi≤n</p><p><strong>输出描述</strong></p><p>输出一个整数，表示最少需要多少次。</p><p><strong>样例输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5
1 5 4 2 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>第一次选4，2， 第二次选1， 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>贪心构造。</p><p>修改次数的最大上限为n//2，因此我们只需要考虑哪些是额外修改的即可。</p><p>例如，n=6，nums [6 3 5 2 4 1]</p><p>那么我们可以保留[3,4]的相对关系，首先将[2,5]进行调整得到[2,6,3,4,1,5]，接着将[1,6]调整，得到[1,2,3,4,5,6]，即可，也就是 n//2 - 1= 2。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

dic <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span>

<span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
    i<span class="token punctuation">,</span> j <span class="token operator">=</span> n<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">//</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    i<span class="token punctuation">,</span> j <span class="token operator">=</span> n<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">//</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span>

cnt <span class="token operator">=</span> n<span class="token operator">//</span><span class="token number">2</span>
<span class="token keyword">while</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dic<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
        cnt <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token keyword">if</span> dic<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> dic<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> dic<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
        i<span class="token operator">-=</span><span class="token number">1</span>
        j<span class="token operator">+=</span><span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">break</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小美的树" tabindex="-1"><a class="header-anchor" href="#小美的树" aria-hidden="true">#</a> 小美的树</h2><p><strong>时间限制：</strong> 3000MS <strong>内存限制：</strong> 655360KB</p><p><strong>题目描述：</strong></p><p>小美在森林里有一棵树。树每年都会生长，生长是随机的，但也有规律。</p><p>1、 每个节点每年至多会长出一个儿子节点（也可能不长）</p><p>2、 当年新生的节点必定是叶子节点。</p><p>3、 树的根为1</p><p>给出两棵树，请你判断第一棵树明年有没有可能长成第二棵树的样子。</p><p>输入描述</p><p>首先输入T，表示T组数据</p><p>对于每一组数据，包含4行，</p><p>第一行是第一棵树的节点数：n。</p><p>第二行有n-1个数字li(i=2,3,...,n)表示第 i 的节点的父亲为li。</p><p>第三行是第二棵树的节点数：m。</p><p>第四行有m-1个数字ri(i=2,3,...,n)表示第 i 的节点的父亲为ri。</p><p>输入保证两棵树的对应节点序号相同，即两棵树的共有点父节点相同，且第二棵树包括第一棵树的所有节点。</p><p>1≤n,m≤50000, 1≤li,ri≤i, 1≤T≤10</p><p>输出描述</p><p>如果第一颗树明年有可能长成第二颗，输出“yes“，否则输出”no”。</p><p>样例输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1
4
1 1 2
6
1 1 2 2 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>样例输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入样例2
1
4
1 1 2
6
1 1 2 4 5
输出样例2
no样例解释2
样例2中5为新生节点，不应有子节点。

输入样例3
2
4
1 1 2
6
1 1 2 2 4
4
1 1 2
6
1 1 2 4 5
输出样例3
yes
no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>题目已经保证了两个数的结构是一致的，因此我们只需要判断新长出的节点是否为叶子节点即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict

T <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    f1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    f2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token comment"># 一年的时间 t1长成t2，意味着 t2只是每个节点比t1多一个子节点就有可能。</span>
    <span class="token comment">#  而且题目保证树结构是一致的，我们只需要判断 t2中的每个 t1不存在的点，是否是叶子</span>

    t1<span class="token punctuation">,</span> t2 <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> t1<span class="token punctuation">[</span>f1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> t2<span class="token punctuation">[</span>f2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>

    <span class="token comment"># t1没有的点</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>

<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> solv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小美的文件夹" tabindex="-1"><a class="header-anchor" href="#小美的文件夹" aria-hidden="true">#</a> 小美的文件夹</h2><p><strong>时间限制：</strong> 3000MS <strong>内存限制：</strong> 589824KB</p><p><strong>题目描述：</strong></p><p>小美喜欢整理电脑文件路径。但是她不喜欢一层一层查看文件夹。于是她写了一个程序，将文件信息写入了一行类html代码中。其中“&lt;folder:name1 &gt;…&lt;\\folder&gt;”表示一个叫name1的文件夹，省略号中可能包括文件夹和文件，“&lt;file:name2\\ &gt;”表示一个叫name2的文件。代码中仅有这两种信息，且文件名或文件夹名中保证不包括“&gt;”、“&lt;”或”\\”且不为空，相同文件夹中的文件夹名各不相同，文件名各不相同。小美希望清除文件夹中无用的文件夹，即空的文件夹。具体定义为：（1） 没有任何文件和文件夹的文件夹是空文件夹（2） 只包含空文件夹的文件夹也是空文件夹。即当前目录树下没有任何文件的文件夹就是空文件夹。小美希望知道有多少空文件夹。</p><p>输入描述</p><p>题目包括T组数据</p><p>对于每一组数据，包含1行字符串s。</p><p>1≤|s|≤50000, 1≤T≤5</p><p>输出描述</p><p>对每组数据，输出一个整数，表示空文件夹的数量。</p><p>样例输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
&lt;folder:name1&gt;&lt;folder:name2&gt;&lt;folder:name3&gt;&lt;\\folder&gt;&lt;\\folder&gt;&lt;file:name4\\&gt;&lt;\\folder&gt;
&lt;folder:name1&gt;&lt;folder:name2&gt;&lt;folder:name3&gt;&lt;file:name4\\&gt;&lt;\\folder&gt;&lt;\\folder&gt;&lt;\\folder&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>样例输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>提示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>样例解释第一组样例中name2、name3都是空文件夹。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>模拟题而已，整体的思想使用栈模拟，用正则表达式来解析文件夹和文件的情况（直接字符串匹配也可以。）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    ans <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> t <span class="token keyword">in</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&#39;&lt;[^&gt;]+&gt;&#39;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> t<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;&lt;folder:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> t<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;&lt;file:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> stack<span class="token punctuation">:</span>
                stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">elif</span> t <span class="token operator">==</span> <span class="token string">&#39;&lt;\\\\folder&gt;&#39;</span><span class="token punctuation">:</span>
            folder <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> folder <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                ans <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> stack<span class="token punctuation">:</span>
                    stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>


T <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>
    solv<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,110),o=[e];function i(l,c){return s(),a("div",null,o)}const r=n(t,[["render",i],["__file","mt20230513.html.vue"]]);export{r as default};
