import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<h2 id="正直者与欺诈者" tabindex="-1"><a class="header-anchor" href="#正直者与欺诈者" aria-hidden="true">#</a> 正直者与欺诈者</h2><p>有n个人，其中一些人是正直者，另外—些人是欺诈者。已知正直者永远说真话，欺诈者永远说假话。</p><p>现在你已经知道了每个人是正直者还是欺诈者。有q次询问，每次询问你需要回答x指证y是正直者还是欺诈者。</p><p><strong>输入描述</strong></p><p>第一行输入一个正整数n，代表人数。</p><p>第二行输入一个长度为n的字符串，第i个字符为&#39;H&#39;代表第i个人是正直者，&#39;L&#39;代表欺诈者。</p><p>第三行输出一个正整数q，代表询问的次数。</p><p>接下来的行，每行输入两个正整数a和y，代表一次询问。</p><p>1 ≤n,q≤ 104</p><p>1 ≤x, y ≤n</p><p>x≠y</p><p><strong>输出描述</strong></p><p>输出q行，分别代表每次指证的结果。</p><p>若x指证y是正直者，则输出&quot;honester&quot;。如果是欺诈者，则输出&quot;liar&quot; 。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5
HLHHL
3
1 2
2 3
3 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>liar
liar
honester
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><p>第一个人是正直者，他会说真话，因此他指证第二个人是欺诈者。</p><p>第二个人是欺诈者，他会说假话，因此他指证第三个人是欺诈者。</p><p>第三个人是正直者，他会说真话，因此他指证第四个人是正直者。</p><p><strong>思路与代码</strong></p><p>打卡题目。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
people <span class="token operator">=</span> <span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> people<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;H&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> people<span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;H&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;honester&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;liar&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> people<span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;H&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;liar&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;honester&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小红的红子树" tabindex="-1"><a class="header-anchor" href="#小红的红子树" aria-hidden="true">#</a> 小红的红子树</h2><p>小红拿到了—棵有根树，树的根节点为1号节点。</p><p>小红将一些节点染成了红色。她想知道有多少子树满足子树所有节点均为红色?</p><p><strong>输入描述</strong></p><p>第一行输入一个正整数n，代表节点的数量。</p><p>第二行输入一个长度为n的字符串，第i个字符为&#39;R&#39;代表第i个节点被染成红色，为&#39;w&#39;代表未被染色。</p><p>接下来的n ― 1行，每行输入两个正整数x和y，代表x和y有一条边连接。</p><p>1&lt;n≤105</p><p>1 ≤x, y ≤n</p><p>输<strong>出描述</strong></p><p>输出一个整数，代表节点均为红色的子树数量。</p><p>示例1</p><p>输入输出示例仅供调试，后台判题数据─般不包含示例</p><p>输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
WRR
1 2
1 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明</p><p>节点2和节点3均合法</p><p><strong>思路与代码</strong></p><p>dfs遍历树，向上返回的是以当前节点为根的子树是否满足全部节点为红色即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
nxs <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    u<span class="token punctuation">,</span>v <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    nxs<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    nxs<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token punctuation">)</span>

cnt <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cur <span class="token operator">=</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;R&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> nx <span class="token keyword">in</span> nxs<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> nx <span class="token operator">!=</span> pre<span class="token punctuation">:</span>
            cur <span class="token operator">=</span> dfs<span class="token punctuation">(</span>nx<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token keyword">and</span> cur
    <span class="token keyword">global</span> cnt
    <span class="token keyword">if</span> cur<span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>
    <span class="token keyword">return</span> cur

dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小红的k-好数" tabindex="-1"><a class="header-anchor" href="#小红的k-好数" aria-hidden="true">#</a> 小红的k-好数</h2><p>小红定义一个数是k-好数，当且仅当这个数可以表示为若干个不同的k的幂之和。</p><p>例如，17是4-好数，因为17=42+40。而8则不是4-好数。</p><p>小红想知道，在区间[1, r]范围内，共有多少个k-好数?共有q次询问。</p><p><strong>输入描述</strong></p><p>第一行输入一个正整数q，代表询问的次数。</p><p>接下来的q行，每行输入三个正整数l, r, k，代表一次询问。</p><p>1≤q≤ 10^3</p><p>1 ≤l,r ≤10^12</p><p>2≤k ≤10^9</p><p><strong>输出描述</strong></p><p>输出q行，每行输出一个整数，对应一次询问。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1
15 21 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>共有4个4-好数:16= 42
17 =42 ＋40
20=42+41
21=42＋41＋40
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>数学题，找到第一个大于等于l的k-好数 num1， 同时找到第一个大于等于r的k-好数 num2。</p><p>例如题目中的15，21分别对应的是16，21，此时，16=4^2 ，表示为[1,0,0]，21=4^2+4^1+4^0，表示为[1,1,1]，我们计算这两个二进制数的差值即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">to_k_base</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
    k_base <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        k_base<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num <span class="token operator">%</span> k<span class="token punctuation">)</span>
        num <span class="token operator">//=</span> k
    <span class="token keyword">return</span> k_base

<span class="token triple-quoted-string string">&#39;&#39;&#39;找到第一个大于等于l的k-好数&#39;&#39;&#39;</span>
<span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
    k_base_l <span class="token operator">=</span> to_k_base<span class="token punctuation">(</span>num<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
    carry <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>k_base_l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        k_base_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> carry
        <span class="token keyword">if</span> k_base_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>
            k_base_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
            carry <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            carry <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">if</span> carry<span class="token punctuation">:</span>
        k_base_l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    num <span class="token operator">=</span> <span class="token number">0</span>
    k_power <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token keyword">for</span> digit <span class="token keyword">in</span> k_base_l<span class="token punctuation">:</span>
        num <span class="token operator">+=</span> digit <span class="token operator">*</span> k_power
        k_power <span class="token operator">*=</span> k

    <span class="token keyword">return</span> num


q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    n1 <span class="token operator">=</span> find<span class="token punctuation">(</span>l<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
    n2 <span class="token operator">=</span> find<span class="token punctuation">(</span>r<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
    <span class="token keyword">if</span> n1 <span class="token operator">&gt;</span> r<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">if</span> n1 <span class="token operator">==</span> r<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>
    cnt <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">if</span> n2 <span class="token operator">!=</span> r<span class="token punctuation">:</span>
        cnt <span class="token operator">-=</span> <span class="token number">1</span>
    s1 <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> to_k_base<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    s2 <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> to_k_base<span class="token punctuation">(</span>n2<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    cnt <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","my20230404.html.vue"]]);export{r as default};
