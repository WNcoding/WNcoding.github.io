import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<h3 id="第一题" tabindex="-1"><a class="header-anchor" href="#第一题" aria-hidden="true">#</a> 第一题</h3><p>小红拿到了一个数组，她可以进行怡好一次操作:选择两个相邻元素将它们合井，合并后的新元素为原来的两个元素之和。</p><p>小红想知道，操作1次后数组的极差的最小值是多少？</p><p>数组的极差为:数组的最大值减最小值。</p><p><strong>输入描述</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>第一行输人一个正警数n，代表数组的大小。
第二行输入n个正整数ai，代表数组的元素。

2&lt;=n&lt;10^5

1&lt;ai&lt;10^9 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出描述</strong></p><p><code>一个整数，代表操作后的极差最小值。</code></p><p><strong>示例1</strong></p><p>输入输出示例仅供调式，后台判题数据一般不包含示例</p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
1 4 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>先预处理出前缀最大值和前缀最小值，以及后缀最大值和后缀最小值。然后枚举每一个位置，计算出合并这个位置和下一个位置后的最大值和最小值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

pre_max <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
pre_min <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
suf_max <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
suf_min <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n

<span class="token keyword">def</span> <span class="token function">get_max</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ret <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
        ret <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> suf_max<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> i<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        ret <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> pre_max<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ret

<span class="token keyword">def</span> <span class="token function">get_min</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ret <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
        ret <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> suf_min<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> i<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        ret <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> pre_min<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ret

pre_max<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> pre_min<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pre_max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>pre_max<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    pre_min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>pre_min<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

suf_max<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> suf_min<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    suf_max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>suf_max<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    suf_min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>suf_min<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

ans <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;inf&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    mx <span class="token operator">=</span> get_max<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    mi <span class="token operator">=</span> get_min<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    ans <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> mx<span class="token operator">-</span>mi<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二题" tabindex="-1"><a class="header-anchor" href="#第二题" aria-hidden="true">#</a> 第二题</h3><p>小红非常喜欢‘R’字符，而不喜欢‘B’字符。因此她定义字符串的权值为字符‘R’的出现次数。例如，&quot;RRBRB&quot;的权值为3。</p><p>小红拿到了一个长度为n的仅由‘R’和‘B’组成的字符串s。她想知道，长度为n的、仅由‘R’和‘B’组成的字符串中，字典序不小于s的字符串的权值之和是多少?由于答案可能太大，请对10^9+7取模后再输出。 <strong>输入描述</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>第一行输入一个正整数n。
第二行输入一个长度为n的、仅由字符 &#39;R&#39;和&#39;B&#39;组成的字符串.
1&lt;=n&lt;=10^5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出描述</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>请输出一个整数，代表长度为n的、字典序不小于s的字符串权值之和。由于答案可能太大，请对10^9+7取模后再输出。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例1</strong></p><p>输入输出示例仅供调试，后台判题数据一般不包含示例</p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
RBR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>共有3个字符串符合要求:
RBR的权值为2。
RRB的权值为2。
RRR的权值为3。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>动态规划。</p><p>f(i,j)表示长度为n-j+1的、仅由‘R’和‘B’组成的字符串中，字典序不小于s[i]的字符串数量。其中，i表示当前考虑到的位置，j表示前k-1个字符是否与s的前k-1个字符完全相同。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mod <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>

n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache

<span class="token decorator annotation punctuation">@lru_cache</span><span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> n<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    cur <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> j <span class="token keyword">or</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">:</span>
        cur <span class="token operator">+=</span>dfs<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token keyword">and</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>
    cur<span class="token operator">+=</span> dfs<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token keyword">and</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;R&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> cur<span class="token operator">%</span> mod

<span class="token decorator annotation punctuation">@lru_cache</span><span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">getAns</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> k <span class="token operator">&gt;</span> n<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    cur <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> f1 <span class="token keyword">or</span> s<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">:</span>
        cur <span class="token operator">+=</span> getAns<span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> f1 <span class="token keyword">and</span> s<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>
    cur <span class="token operator">+=</span> getAns<span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> f1 <span class="token keyword">and</span> s<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;R&#39;</span><span class="token punctuation">)</span>
    cur <span class="token operator">+=</span> dfs<span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> f1 <span class="token keyword">and</span> s<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;R&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> cur<span class="token operator">%</span>mod

dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>getAns<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第三题" tabindex="-1"><a class="header-anchor" href="#第三题" aria-hidden="true">#</a> 第三题</h3><p>定义一个数组的权值为:数组所有元素乘积的因子数量。例如，数组[23]的权值为4，因为2*3=6有4个因子:1、2、3、6。</p><p>小红拿到了一个仅包含2和3的数组，她希望你把该数组重新排列，使得所有连续子数组的权值之和尽可能小。你能帮帮她吗?</p><p><strong>输入描述</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>第一行输入一个正整数n，代表数组的大小。
第二行输入n个正整数ai，代表小红拿到的数组
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出描述</strong></p><p>一个正整数，代表重排后，所有连续子数组权值之和的最小值.</p><p><strong>示例1</strong></p><p><code>输入输出示例仅供调试，后台判题数据一般不包含示例</code></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
2 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>无论是否重排，该数组的连续子数组权值之和都是8:
[2]的权值为2。
[3]的权值为2。
[2,3]的权值为4。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>此题AC的思路是排列成 222...333...3，这种思路可以AC，但是确实有bug的....今年这种情况不是第一次见到了，大家习惯就好。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

cnt2 <span class="token operator">=</span> <span class="token number">0</span>
cnt3 <span class="token operator">=</span> <span class="token number">0</span>
ans <span class="token operator">=</span> <span class="token number">0</span>
sum2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
sum3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        cnt2 <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        cnt3 <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> cnt2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sum2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span>
    ans <span class="token operator">+=</span> sum2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> cnt3<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sum3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum3<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span>
    ans <span class="token operator">+=</span> sum3<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    ans <span class="token operator">+=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> sum2<span class="token punctuation">[</span>cnt2<span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","my20230420.html.vue"]]);export{r as default};
