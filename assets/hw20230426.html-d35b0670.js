import{_ as n,o as s,c as a,a as p}from"./app-d0f06d78.js";const t={},e=p(`<div class="custom-container tip"><p class="custom-container-title">前言</p><p>本场难度比较大。</p><p>第一题偏打卡。 第二题卡100ms，Java选手注意快读。 第三题听天由命。</p></div><h2 id="_1、批量初始化次数" tabindex="-1"><a class="header-anchor" href="#_1、批量初始化次数" aria-hidden="true">#</a> 1、批量初始化次数</h2><p>某部门在开发一个代码分析工具，需要分析模块之间的依赖关系，用来确定模块的初始化顺序、是否有循环依期等问题。&quot;批量初始化”是指一次可以初始化一个或多个模块。例如模块1依赖模块2，模块3也依赖模块2，但模块1和3没有依赖关系，则必须先&quot;批量初始化”模块2，再&quot;批量初始化&quot;模块1和3。现给定一组模块间的依赖关系，请计算需要“批量初始化&quot;的次数。</p><p><strong>解答要求</strong></p><p><strong>时间限制</strong>: C/C++ 1000ms.其他语言: 2000ms</p><p><strong>内存限制</strong>: C/C++ 256MB,其他语言: 512MB</p><p><strong>输入</strong></p><p>(1)第1行只有一个数字.表示模块总数N。</p><p>(2)随后的N行依次表示模块1到N的依赖数据。每行的第1个数表示依赖的模块数量(不会超过N)，之后的数字表示当前模块依赖的ID序列。该序列不会重复出现相同的数字，模块ID的取值定在[1,N]之内。</p><p>(3)模块总数N取值范围 1&lt;=N&lt;=1000.</p><p>(4)每一行里面的数字按1个空格分隔。</p><p><strong>输出</strong></p><p>输出&quot;批量初始化次数”.若有循环依赖无法完成初始化，则输出-1。</p><p><strong>样例1</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    输入: 5
          3 2 3 4
          1 5
          1 5
          0
    输出: 3
解释:共5个模块。
模块1依赖模块2、3、4；
模块2依赖模块5
模块3依赖模块5
模块4依赖模块5
模块5没有依赖任何模块
批量初始化顺序为{5}-&gt;{2，3，4}-&gt;{1},共需”批量初始化”3次
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例2</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    输入: 3
          1 2
          1 3
          1 1  
    输出: -1
解释:存在循环依赖，无法完成初始化，返回-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>拓扑排序模拟即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
N <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

indegre <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
nxs <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>N <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        nxs<span class="token punctuation">[</span>lines<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        indegre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> indegre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

cnt1 <span class="token operator">=</span> <span class="token number">0</span>
cnt2 <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>
    cnt1 <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        node <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
        cnt2 <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> nx <span class="token keyword">in</span> nxs<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
            indegre<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">1</span>
            <span class="token keyword">if</span> indegre<span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nx<span class="token punctuation">)</span>

<span class="token keyword">if</span> cnt2 <span class="token operator">==</span> N<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>cnt1<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、分配资源id" tabindex="-1"><a class="header-anchor" href="#_2、分配资源id" aria-hidden="true">#</a> 2、分配资源ID</h2><p>给定一个管理ID的资源池，可以从资源池中分配资源ID和释放资源ID，分配方式有动态分配和指定分配，动态分配是从资源池的开始分配一个资源ID，指定分配是指定一个资源ID进行分配，无论哪种分配方式释放资源ID时都需要放到资源池的尾部。执行一系列操作后，请问资源池的第一个空闲资源ID应该是多少?</p><p><strong>注意:</strong></p><p>资源池的初始顺序是从小到大。</p><p>资源池中空闲资源ID不足时，动态分配失败，对资源池不进行任何操作.</p><p>指定分配资源ID已经被占用或者不在资源池范围内时，对资源池不进行任何操作。</p><p>释放资源ID不在资源池范围内时或者已经是空闲资源ID时，对资源池不进行任何操作。</p><p>保证每个用例最后都有空闲资源ID。</p><p><strong>解答要求</strong></p><p><strong>时间限制:</strong> C/C++ 100ms,其他语言: 200ms</p><p><strong>内存限制:</strong> C/C++ 32MB.其他语言: 64MB</p><p><strong>输入</strong></p><p>第一行是资源池的范围:</p><p>第二行是操作个数。</p><p>第三行开始，第一个数字代表操作类型，1表示动态分配，2表示指定分配，3表示释放；</p><p>如果第一个数字是1，第二个表示分配的个数;</p><p>如果第一个数字是2，第二个表示分配的资源ID;</p><p>如果第一个数字是3，第二个表示释放的资源ID。</p><p><strong>输出</strong></p><p>资源池的第一个空闲资源ID</p><p><strong>样例1</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    输入: 1 3
          2
          2 2
          3 1
    输出: 2
解释:第一行资源池范围是[1.3]，资源池的初始顺序是1-&gt;2-&gt;3。
第二行操作个数有2个。
第三行动态分配1个资源ID，资源池中剩余的资源ID顺序是2-&gt;3.
第四行释放1个资源ID，资源ID是1，资源池中剩余的资源ID顺序是2-&gt;3-&gt;1.
执行以上操作后，资源池的第一个空闲资源ID是2。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例2</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: 1 3
     3
     2 2
     3 2
     1 1
输出: 3
解释: 第一行资源池范围是[1.3]，资源池的初始顺序是1-&gt;2-&gt;3。
第二行操作人数有3个。
第三行指定分配1个资源ID，资源ID是2，资源池中剩余的资源ID顺序是1-&gt;3-&gt;2.
第四行释放1个资源D，资源ID是2，资源池中剩余的资源ID顺序是1-&gt;3-&gt;2.
第五行动态分配1个资源ID，分配的资源ID是1，资源池中剩余的资源ID顺序是3-&gt;2。
执行以上操作后，资源池的第一个空闲资源ID是3。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示</strong></p><p>保证输入的操作都是合法的。</p><p>操作类型范围是[1.3]。</p><p>分配次数范围是[1.100000]</p><p>资源池范围的最小值是1，最大值取值范围是[1,100000].</p><p>如果操作类型是1，分配资源个数的取值范围是[1,200]。</p><p><strong>思路与代码</strong></p><p>双向链表+哈希表模拟</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>val<span class="token punctuation">,</span> pre<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        self<span class="token punctuation">.</span>pre <span class="token operator">=</span> pre
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>

s<span class="token punctuation">,</span>e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
mapIndex <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

pre <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
tail <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
dummy <span class="token operator">=</span> pre
cnt <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    cur <span class="token operator">=</span> Node<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    cnt <span class="token operator">+=</span> <span class="token number">1</span>
    dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cur

    cur<span class="token punctuation">.</span>pre <span class="token operator">=</span> pre
    pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur
    pre <span class="token operator">=</span> cur
    <span class="token keyword">if</span> i <span class="token operator">==</span> e<span class="token punctuation">:</span> tail<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur

n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cnt <span class="token operator">&lt;=</span> b<span class="token punctuation">:</span><span class="token keyword">continue</span>
        cnt <span class="token operator">-=</span> b
        head <span class="token operator">=</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">del</span> dic<span class="token punctuation">[</span>head<span class="token punctuation">.</span>val<span class="token punctuation">]</span>
            dummy<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
            head <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
            head<span class="token punctuation">.</span>pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">elif</span> a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        node <span class="token operator">=</span> dic<span class="token punctuation">[</span>b<span class="token punctuation">]</span>
        node<span class="token punctuation">.</span>pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">del</span> dic<span class="token punctuation">[</span>b<span class="token punctuation">]</span>
        cnt <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        tail<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> Node<span class="token punctuation">(</span>b<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>dummy<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、疯长的草" tabindex="-1"><a class="header-anchor" href="#_3、疯长的草" aria-hidden="true">#</a> 3、疯长的草</h2><p>将N种不同的随机种在一块广漠无边的二维平面上(角坐标系内)，给定二维数组points表示第0天所有草的初始位置，第i项points[I]=[XI,Y]表示第0天草i点[XI,YI].每天，被草覆盖的点会向外蔓延到它上、下、左、右、左上、左下、右上、右下8个邻居点。注意，初始状态下，可能有多种草在同一点上。</p><p>现给定一个整数 M，问最少需要多少天，方能找到一点同时至少有 M 种草?</p><p><strong>解答要求</strong></p><p><strong>时间限制:</strong> C/C++ 1000ms.其他语言: 2000ms</p><p><strong>内存限制:</strong> C/C++ 256MB,其他语言: 512MB</p><p><strong>输入</strong></p><p>第一行输入整数M。 (2 &lt;= M &lt;= n)</p><p>第二行输入草的种数n。 (2 &lt;= n &lt;= 50)</p><p>后面连续n行输入草i初始位置[xi, yi]。 (1 &lt;= xi,yi &lt;= 10^9)</p><p><strong>输出</strong></p><p>返回找到一点至少生长 M 种草的最少天数，找不到返回0</p><p><strong>样例1</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>     输入: 2
          2
          2 1
          6 2
     输出: 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样例2</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>     输入: 2
          3
          2 1
          6 2
          100 100
     输出: 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示</strong></p><p>n = points.length</p><p>2 &lt;= n &lt;= 50</p><p>points[I].length = 2 1 &lt;= xi,Yi &lt;= 10^9 2 &lt;= M &lt;=n</p><p><strong>思路与代码</strong></p><p>1.数据比较大，需要离散化处理。</p><p>2.二分枚举所有可能。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
xys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
dirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    xys<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
r <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
l <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
    mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    stat <span class="token operator">=</span> <span class="token number">0</span>
    ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>xys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>xys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>xys<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> xys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>xys<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> xys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">*</span> mid<span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            sx1<span class="token punctuation">,</span>sy1<span class="token punctuation">,</span>ex1<span class="token punctuation">,</span>ey1 <span class="token operator">=</span> xys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> mid<span class="token punctuation">,</span>xys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> mid<span class="token punctuation">,</span>xys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> mid<span class="token punctuation">,</span>xys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> mid
            sx2<span class="token punctuation">,</span>sy2<span class="token punctuation">,</span>ex2<span class="token punctuation">,</span>ey2 <span class="token operator">=</span> xys<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> mid<span class="token punctuation">,</span>xys<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> mid<span class="token punctuation">,</span>xys<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> mid<span class="token punctuation">,</span>xys<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> mid
            ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">max</span><span class="token punctuation">(</span>sx1<span class="token punctuation">,</span> sx2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>sy1<span class="token punctuation">,</span> sy2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">max</span><span class="token punctuation">(</span>sx1<span class="token punctuation">,</span> sx2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span>ey1<span class="token punctuation">,</span> ey2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">max</span><span class="token punctuation">(</span>sy1<span class="token punctuation">,</span> sy2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>sx1<span class="token punctuation">,</span> sx2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">max</span><span class="token punctuation">(</span>sy1<span class="token punctuation">,</span> sy2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span>ex1<span class="token punctuation">,</span> ex2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> ls<span class="token punctuation">:</span>
        cur<span class="token operator">=</span><span class="token number">0</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>xys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> xys<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> xys<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>mid<span class="token punctuation">:</span>
                cur<span class="token operator">+=</span><span class="token number">1</span>
        <span class="token keyword">if</span> cur<span class="token operator">&gt;=</span>m<span class="token punctuation">:</span>
            stat<span class="token operator">=</span><span class="token number">1</span>
            <span class="token keyword">break</span>
    <span class="token keyword">if</span> stat<span class="token punctuation">:</span>
        r<span class="token operator">=</span>mid
        res<span class="token operator">=</span>mid
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        l<span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>

<span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,77),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","hw20230426.html.vue"]]);export{k as default};
