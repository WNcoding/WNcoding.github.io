import{_ as t,r as e,o,c,b as s,d as n,e as l,a}from"./app-d0f06d78.js";const i={},u=a(`<h2 id="字符串转整数" tabindex="-1"><a class="header-anchor" href="#字符串转整数" aria-hidden="true">#</a> 字符串转整数</h2><p>实现一个把字符串转为整数的函数。自动删除开头无效空白字符，遇到第一个字符为&quot;+&quot;/&quot;-”，则返回整数为正/负。若第一个字符不是数字和&quot;+&quot;/&quot;-”，则直接返回0。超过32位的int范围，返回最大或最小值即可INT_MAX (2^31一1)或INT_MIN(-2^31)。 <strong>输入描述</strong></p><p>输入为任意字符串 <strong>输出描述</strong></p><p>返回数值</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>32
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>32
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>相信这100分没有拿不到吧。。。。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    s <span class="token operator">=</span> s<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    flag <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">:</span>
            flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
        s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    res <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> c<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    res <span class="token operator">*=</span> flag
    <span class="token keyword">if</span> res <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">if</span> res <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span>
    <span class="token keyword">return</span> res

<span class="token keyword">print</span><span class="token punctuation">(</span>solv<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="概率计算" tabindex="-1"><a class="header-anchor" href="#概率计算" aria-hidden="true">#</a> 概率计算</h2><p>假设一个端口每毫秒收到的包的个数，是独立且同分布的。已知每毫秒收到的包的个数大于100个的概率为P_large。 请求解以下事件的概率，并将概率输出: 连续N_meas毫秒之内，“某毫秒收到的包的个数大于100个”的毫秒的个数“大于等于N1且小于等于N2&quot;的概率 <strong>输入描述</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[P_large N_meas N1 N2](&quot;[&quot;和&quot;]&quot;之内为输入。每个输入由空格隔开。若使用MATL.AB，可以用语句input ( &#39;&#39;)获得输入。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输出描述</strong></p><p>以&quot;1.2f&quot;打印概率（不要打印或输出任何其它变量)</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[0.75 50 30 40]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0.83
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p>`,23),r=s("strong",null,"二项分布",-1),k={href:"https://baike.baidu.com/item/%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83/1442377?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> math <span class="token keyword">import</span> comb
P_large<span class="token punctuation">,</span> N_meas<span class="token punctuation">,</span> N1<span class="token punctuation">,</span> N2 <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
prob <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>N1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>N2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    prob <span class="token operator">+=</span> comb<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>N_meas<span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>P_large<span class="token operator">**</span>k<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>P_large<span class="token punctuation">)</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>N_meas<span class="token punctuation">)</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>prob<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="规整的文本" tabindex="-1"><a class="header-anchor" href="#规整的文本" aria-hidden="true">#</a> 规整的文本</h2><p>现给出─组单词和行宽约束参数L，需要对文本进行处理，要求如下:1、规整后输出的每行所包含的字符个数应等于L。 2、每行文本包含尽可能多的单词，单词之间或行尾不足部分都以“ * &quot;填充。 3、如果一行有两个或两个以上的单词，则要求第一个单词和最后一个单词分别与左右边界对齐。 4、一行内单词间的“ * &quot;尽可能的均匀分布。如果无法均匀分布，则左边可多于右边1个“ * ”字符 5、最后一行的单词之间仅需一个“*” <strong>输入描述</strong></p><p>单词列表。单词之间以&quot;,&quot;分隔 规整后输出的行宽约束参数L <strong>输出描述</strong></p><p>处理后的文本。</p><p><strong>示例1</strong></p><p><strong>输入</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>This,is,an,eggplant,of,our,beautifull,sweety,baby
16
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>This****is****an
eggplant**of*our
beautifull******
sweety*baby*****
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>题目保证行宽大于等于最大的单词长度
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>思路与代码</strong></p><p>字符串模拟题，按照题目的要求进行处理即可。这里再次体现了python做笔试题的优势，太好用了.....</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">solv</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  
    i <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>
        line <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  
        line_len <span class="token operator">=</span> <span class="token number">0</span>  
        <span class="token comment"># 当单词列表未遍历完且当前行加上新单词后不超过行宽约束时</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span> <span class="token keyword">and</span> line_len <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> L<span class="token punctuation">:</span>
            line<span class="token punctuation">.</span>append<span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 将单词添加到当前行</span>
            line_len <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 更新当前行长度</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 如果已经遍历完单词列表</span>
            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 最后一行的单词之间只需一个“*”</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 如果当前行只有一个单词</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 行尾填充“*”</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                cnt <span class="token operator">=</span> <span class="token punctuation">(</span>L <span class="token operator">-</span> line_len<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 计算每两个单词之间需要填充的“*”的数量</span>
                rest <span class="token operator">=</span> <span class="token punctuation">(</span>L <span class="token operator">-</span> line_len<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 计算剩余的“*”的数量</span>
                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    line<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">&#39;*&#39;</span>  <span class="token comment"># 将剩余的“*”尽量均匀地分布在左边</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span> <span class="token operator">*</span> cnt<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将当前行添加到结果列表中</span>
    <span class="token keyword">return</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment"># 返回处理后的文本</span>

words <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
L <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>solv<span class="token punctuation">(</span>words<span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function v(m,b){const p=e("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("带入"),r,n("的公式即可，忘记概念的同学请自行查阅："),s("a",k,[n("二项分布_百度百科 (baidu.com)"),l(p)])]),d])}const y=t(i,[["render",v],["__file","ry20230425.html.vue"]]);export{y as default};
